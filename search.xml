<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>小王子双链表（蓝桥1112）</title>
    <url>/2025/06/02/%E5%B0%8F%E7%8E%8B%E5%AD%90%E5%8F%8C%E9%93%BE%E8%A1%A8%EF%BC%88%E8%93%9D%E6%A1%A51112%EF%BC%89/</url>
    <content><![CDATA[<h1 id="小王子双链表（蓝桥1112）"><a href="#小王子双链表（蓝桥1112）" class="headerlink" title="小王子双链表（蓝桥1112）"></a>小王子双链表（蓝桥1112）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=L;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextLNode</span><span class="params">(LNode *p,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=x;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertX</span><span class="params">(LinkList L,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=L)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=L-&gt;next;</span><br><span class="line">  L-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printLinkList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=L)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line"></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *q;</span><br><span class="line">  q=L;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextLNode</span>(q,i);</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="comment">//printLinkList(L);</span></span><br><span class="line">  <span class="type">int</span> m;</span><br><span class="line">  cin&gt;&gt;m;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">InsertX</span>(L,x);</span><br><span class="line">    <span class="built_in">printLinkList</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lanqiao.cn/problems/1112/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/1112/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">3.小王子双链表 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>蓝桥题解</tag>
        <tag>c++</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>小王子单链表（蓝桥1110）</title>
    <url>/2025/06/02/%E5%B0%8F%E7%8E%8B%E5%AD%90%E5%8D%95%E9%93%BE%E8%A1%A8%EF%BC%88%E8%93%9D%E6%A1%A51110%EF%BC%89/</url>
    <content><![CDATA[<h1 id="小王子单链表（蓝桥1110）"><a href="#小王子单链表（蓝桥1110）" class="headerlink" title="小王子单链表（蓝桥1110）"></a>小王子单链表（蓝桥1110）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;bits/stdc++.h&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextNode</span><span class="params">(LNode *p,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(p==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=e;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertX</span><span class="params">(LinkList L,<span class="type">int</span> x)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  LNode *t;</span><br><span class="line">  <span class="type">int</span> i=<span class="number">0</span>;</span><br><span class="line">  <span class="keyword">while</span>(s!=<span class="literal">NULL</span>&amp;&amp;s-&gt;next-&gt;data!=x)&#123;</span><br><span class="line">    i++;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=L-&gt;next;</span><br><span class="line">  L-&gt;next=t;</span><br><span class="line">  <span class="comment">//t=L-&gt;next-&gt;data;</span></span><br><span class="line">  <span class="comment">//L-&gt;next-&gt;data=s-&gt;data;</span></span><br><span class="line">  <span class="comment">//s-&gt;data=t;</span></span><br><span class="line"> <span class="comment">// free(s);</span></span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printLink</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  cout&lt;&lt;endl;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *p;</span><br><span class="line">  p=L;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=<span class="number">10</span>;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextNode</span>(p,i);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> M;cin&gt;&gt;M;</span><br><span class="line">  <span class="type">int</span> x;</span><br><span class="line">  <span class="comment">//printLink(L);</span></span><br><span class="line">  <span class="keyword">while</span>(M--)&#123;</span><br><span class="line">    cin&gt;&gt;x;</span><br><span class="line">    <span class="built_in">InsertX</span>(L,x);</span><br><span class="line">    <span class="built_in">printLink</span>(L);</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>对于<code>bool InitList(LinkList &amp;L)</code>函数中的<code>&amp;</code>符号主要用于声明引用类型，<code>&amp;</code> 表示 <code>L</code> 是一个引用。引用的作用是让函数直接操作传入的变量，而不是变量的副本。如果不使用引用，函数内部对 <code>L</code> 的修改（如分配内存）不会影响到函数外部的变量。通过引用，函数可以直接修改外部变量的值，实现链表的初始化操作。</p>
<p><code>*</code>的作用是在链表操作中，指针（如 <code>LNode *s</code>）用于指向链表中的节点，通过指针可以方便地访问和修改节点的成员（如 <code>s-&gt;next</code>），从而实现链表的插入、删除等操作。</p>
<p>通过合理使用 <code>&amp;</code> 和 <code>*</code>，代码能够高效地实现链表的操作，同时避免了不必要的变量拷贝，提高了代码的效率和可读性。</p>
<p><a href="https://www.lanqiao.cn/problems/1110/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/1110/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">2.小王子单链表 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>蓝桥题解</tag>
        <tag>c++</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>重新排队（蓝桥3255）</title>
    <url>/2025/06/02/%E9%87%8D%E6%96%B0%E6%8E%92%E9%98%9F%EF%BC%88%E8%93%9D%E6%A1%A53255%EF%BC%89/</url>
    <content><![CDATA[<h1 id="重新排队（蓝桥3255）"><a href="#重新排队（蓝桥3255）" class="headerlink" title="重新排队（蓝桥3255）"></a>重新排队（蓝桥3255）</h1><figure class="highlight c++"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> std;</span><br><span class="line"></span><br><span class="line"><span class="keyword">typedef</span> <span class="keyword">struct</span> <span class="title class_">LNode</span>&#123;</span><br><span class="line">  <span class="type">int</span> data;</span><br><span class="line">  <span class="keyword">struct</span> <span class="title class_">LNode</span> *next;</span><br><span class="line">&#125;LNode,*LinkList;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InitList</span><span class="params">(LinkList &amp;L)</span></span>&#123;</span><br><span class="line">  L=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(L==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  L-&gt;next=<span class="literal">NULL</span>;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertNextLNode</span><span class="params">(LNode *p,<span class="type">int</span> e)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  s-&gt;data=e;</span><br><span class="line">  s-&gt;next=p-&gt;next;</span><br><span class="line">  p-&gt;next=s;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertYX</span><span class="params">(LinkList L,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *q=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  q=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(q-&gt;data!=y&amp;&amp;q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=q-&gt;next;</span><br><span class="line">  q-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">InsertXY</span><span class="params">(LinkList L,<span class="type">int</span> x,<span class="type">int</span> y)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  <span class="keyword">if</span>(s==<span class="literal">NULL</span>)<span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">  LNode *t=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  LNode *q=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  q=L;</span><br><span class="line">   <span class="keyword">while</span>(s-&gt;next-&gt;data!=x&amp;&amp;s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  t=s-&gt;next;</span><br><span class="line">  <span class="keyword">while</span>(q-&gt;next-&gt;data!=y&amp;&amp;q-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    q=q-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">   s-&gt;next=s-&gt;next-&gt;next;</span><br><span class="line">  t-&gt;next=q-&gt;next;</span><br><span class="line">  q-&gt;next=t;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">bool</span> <span class="title">printfList</span><span class="params">(LinkList L)</span></span>&#123;</span><br><span class="line">  LNode *s=(LNode*)<span class="built_in">malloc</span>(<span class="built_in">sizeof</span>(LNode));</span><br><span class="line">  s=L;</span><br><span class="line">  <span class="keyword">while</span>(s-&gt;next!=<span class="literal">NULL</span>)&#123;</span><br><span class="line">    cout&lt;&lt;s-&gt;next-&gt;data&lt;&lt;<span class="string">&quot; &quot;</span>;</span><br><span class="line">    s=s-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="type">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  <span class="comment">// 请在此输入您的代码</span></span><br><span class="line">  LinkList L;</span><br><span class="line">  <span class="built_in">InitList</span>(L);</span><br><span class="line">  LNode *p;</span><br><span class="line">  p=L;</span><br><span class="line">  <span class="type">int</span> n,m;cin&gt;&gt;n&gt;&gt;m;</span><br><span class="line">  <span class="keyword">for</span>(<span class="type">int</span> i=<span class="number">1</span>;i&lt;=n;i++)&#123;</span><br><span class="line">    <span class="built_in">InsertNextLNode</span>(p,i);</span><br><span class="line">    p=p-&gt;next;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="type">int</span> x,y,z;</span><br><span class="line">  <span class="keyword">while</span>(m--)&#123;</span><br><span class="line">    cin&gt;&gt;x&gt;&gt;y&gt;&gt;z;</span><br><span class="line">    <span class="keyword">if</span>(z==<span class="number">0</span>)&#123;</span><br><span class="line">      <span class="built_in">InsertYX</span>(L,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">      <span class="built_in">InsertXY</span>(L,x,y);</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="built_in">printfList</span>(L);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><a href="https://www.lanqiao.cn/problems/3255/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20"><a href="https://www.lanqiao.cn/problems/3255/learning/?page=1&first_category_id=1&tags=%E9%93%BE%E8%A1%A8&tag_relation=intersection&difficulty=20">5.重新排队 - 蓝桥云课</a></a></p>
]]></content>
      <categories>
        <category>蓝桥题解</category>
      </categories>
      <tags>
        <tag>蓝桥题解</tag>
        <tag>c++</tag>
        <tag>链表</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2025/06/02/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>

<p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>
]]></content>
  </entry>
</search>
